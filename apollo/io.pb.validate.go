// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/io.proto

package apollov1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	code "google.golang.org/genproto/googleapis/rpc/code"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = code.Code(0)
)

// Validate checks the field values on CreateWarehouseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWarehouseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWarehouseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWarehouseRequestMultiError, or nil if none found.
func (m *CreateWarehouseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWarehouseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetCode()); l < 1 || l > 255 {
		err := CreateWarehouseRequestValidationError{
			field:  "Code",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := CreateWarehouseRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsActive

	// no validation rules for IsBulkyAllow

	// no validation rules for IsBulkyAllowBop

	// no validation rules for ErpId

	if len(errors) > 0 {
		return CreateWarehouseRequestMultiError(errors)
	}

	return nil
}

// CreateWarehouseRequestMultiError is an error wrapping multiple validation
// errors returned by CreateWarehouseRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateWarehouseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWarehouseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWarehouseRequestMultiError) AllErrors() []error { return m }

// CreateWarehouseRequestValidationError is the validation error returned by
// CreateWarehouseRequest.Validate if the designated constraints aren't met.
type CreateWarehouseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWarehouseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWarehouseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWarehouseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWarehouseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWarehouseRequestValidationError) ErrorName() string {
	return "CreateWarehouseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWarehouseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWarehouseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWarehouseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWarehouseRequestValidationError{}

// Validate checks the field values on CreateWarehouseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWarehouseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWarehouseResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWarehouseResponseMultiError, or nil if none found.
func (m *CreateWarehouseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWarehouseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateWarehouseResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateWarehouseResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateWarehouseResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateWarehouseResponseMultiError(errors)
	}

	return nil
}

// CreateWarehouseResponseMultiError is an error wrapping multiple validation
// errors returned by CreateWarehouseResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateWarehouseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWarehouseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWarehouseResponseMultiError) AllErrors() []error { return m }

// CreateWarehouseResponseValidationError is the validation error returned by
// CreateWarehouseResponse.Validate if the designated constraints aren't met.
type CreateWarehouseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWarehouseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWarehouseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWarehouseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWarehouseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWarehouseResponseValidationError) ErrorName() string {
	return "CreateWarehouseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWarehouseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWarehouseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWarehouseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWarehouseResponseValidationError{}

// Validate checks the field values on GetWarehouseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWarehouseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWarehouseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWarehouseRequestMultiError, or nil if none found.
func (m *GetWarehouseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWarehouseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetWarehouseRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetWarehouseRequestMultiError(errors)
	}

	return nil
}

// GetWarehouseRequestMultiError is an error wrapping multiple validation
// errors returned by GetWarehouseRequest.ValidateAll() if the designated
// constraints aren't met.
type GetWarehouseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWarehouseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWarehouseRequestMultiError) AllErrors() []error { return m }

// GetWarehouseRequestValidationError is the validation error returned by
// GetWarehouseRequest.Validate if the designated constraints aren't met.
type GetWarehouseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWarehouseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWarehouseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWarehouseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWarehouseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWarehouseRequestValidationError) ErrorName() string {
	return "GetWarehouseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWarehouseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWarehouseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWarehouseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWarehouseRequestValidationError{}

// Validate checks the field values on GetWarehouseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWarehouseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWarehouseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWarehouseResponseMultiError, or nil if none found.
func (m *GetWarehouseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWarehouseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWarehouseResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWarehouseResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWarehouseResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetWarehouseResponseMultiError(errors)
	}

	return nil
}

// GetWarehouseResponseMultiError is an error wrapping multiple validation
// errors returned by GetWarehouseResponse.ValidateAll() if the designated
// constraints aren't met.
type GetWarehouseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWarehouseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWarehouseResponseMultiError) AllErrors() []error { return m }

// GetWarehouseResponseValidationError is the validation error returned by
// GetWarehouseResponse.Validate if the designated constraints aren't met.
type GetWarehouseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWarehouseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWarehouseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWarehouseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWarehouseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWarehouseResponseValidationError) ErrorName() string {
	return "GetWarehouseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWarehouseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWarehouseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWarehouseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWarehouseResponseValidationError{}

// Validate checks the field values on ListWarehouseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWarehouseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWarehouseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWarehouseRequestMultiError, or nil if none found.
func (m *ListWarehouseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWarehouseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetNext() < 0 {
		err := ListWarehouseRequestValidationError{
			field:  "Next",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLimit(); val <= 0 || val > 100 {
		err := ListWarehouseRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListWarehouseRequestMultiError(errors)
	}

	return nil
}

// ListWarehouseRequestMultiError is an error wrapping multiple validation
// errors returned by ListWarehouseRequest.ValidateAll() if the designated
// constraints aren't met.
type ListWarehouseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWarehouseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWarehouseRequestMultiError) AllErrors() []error { return m }

// ListWarehouseRequestValidationError is the validation error returned by
// ListWarehouseRequest.Validate if the designated constraints aren't met.
type ListWarehouseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWarehouseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWarehouseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWarehouseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWarehouseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWarehouseRequestValidationError) ErrorName() string {
	return "ListWarehouseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWarehouseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWarehouseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWarehouseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWarehouseRequestValidationError{}

// Validate checks the field values on ListWarehouseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWarehouseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWarehouseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWarehouseResponseMultiError, or nil if none found.
func (m *ListWarehouseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWarehouseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Len

	// no validation rules for Next

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWarehouseResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWarehouseResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWarehouseResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListWarehouseResponseMultiError(errors)
	}

	return nil
}

// ListWarehouseResponseMultiError is an error wrapping multiple validation
// errors returned by ListWarehouseResponse.ValidateAll() if the designated
// constraints aren't met.
type ListWarehouseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWarehouseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWarehouseResponseMultiError) AllErrors() []error { return m }

// ListWarehouseResponseValidationError is the validation error returned by
// ListWarehouseResponse.Validate if the designated constraints aren't met.
type ListWarehouseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWarehouseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWarehouseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWarehouseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWarehouseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWarehouseResponseValidationError) ErrorName() string {
	return "ListWarehouseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWarehouseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWarehouseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWarehouseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWarehouseResponseValidationError{}

// Validate checks the field values on UpdateWarehouseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWarehouseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWarehouseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWarehouseRequestMultiError, or nil if none found.
func (m *UpdateWarehouseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWarehouseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateWarehouseRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetData() == nil {
		err := UpdateWarehouseRequestValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if a := m.GetData(); a != nil {

	}

	if len(errors) > 0 {
		return UpdateWarehouseRequestMultiError(errors)
	}

	return nil
}

// UpdateWarehouseRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateWarehouseRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateWarehouseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWarehouseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWarehouseRequestMultiError) AllErrors() []error { return m }

// UpdateWarehouseRequestValidationError is the validation error returned by
// UpdateWarehouseRequest.Validate if the designated constraints aren't met.
type UpdateWarehouseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWarehouseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWarehouseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWarehouseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWarehouseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWarehouseRequestValidationError) ErrorName() string {
	return "UpdateWarehouseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWarehouseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWarehouseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWarehouseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWarehouseRequestValidationError{}

// Validate checks the field values on UpdateWarehouseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWarehouseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWarehouseResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWarehouseResponseMultiError, or nil if none found.
func (m *UpdateWarehouseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWarehouseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateWarehouseResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateWarehouseResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateWarehouseResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateWarehouseResponseMultiError(errors)
	}

	return nil
}

// UpdateWarehouseResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateWarehouseResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateWarehouseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWarehouseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWarehouseResponseMultiError) AllErrors() []error { return m }

// UpdateWarehouseResponseValidationError is the validation error returned by
// UpdateWarehouseResponse.Validate if the designated constraints aren't met.
type UpdateWarehouseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWarehouseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWarehouseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWarehouseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWarehouseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWarehouseResponseValidationError) ErrorName() string {
	return "UpdateWarehouseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWarehouseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWarehouseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWarehouseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWarehouseResponseValidationError{}

// Validate checks the field values on SyncWarehouseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SyncWarehouseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncWarehouseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SyncWarehouseRequestMultiError, or nil if none found.
func (m *SyncWarehouseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncWarehouseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetErpId() <= 0 {
		err := SyncWarehouseRequestValidationError{
			field:  "ErpId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetData() == nil {
		err := SyncWarehouseRequestValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if a := m.GetData(); a != nil {

	}

	if len(errors) > 0 {
		return SyncWarehouseRequestMultiError(errors)
	}

	return nil
}

// SyncWarehouseRequestMultiError is an error wrapping multiple validation
// errors returned by SyncWarehouseRequest.ValidateAll() if the designated
// constraints aren't met.
type SyncWarehouseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncWarehouseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncWarehouseRequestMultiError) AllErrors() []error { return m }

// SyncWarehouseRequestValidationError is the validation error returned by
// SyncWarehouseRequest.Validate if the designated constraints aren't met.
type SyncWarehouseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncWarehouseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncWarehouseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncWarehouseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncWarehouseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncWarehouseRequestValidationError) ErrorName() string {
	return "SyncWarehouseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SyncWarehouseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncWarehouseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncWarehouseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncWarehouseRequestValidationError{}

// Validate checks the field values on SyncWarehouseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SyncWarehouseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncWarehouseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SyncWarehouseResponseMultiError, or nil if none found.
func (m *SyncWarehouseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncWarehouseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SyncWarehouseResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SyncWarehouseResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SyncWarehouseResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SyncWarehouseResponseMultiError(errors)
	}

	return nil
}

// SyncWarehouseResponseMultiError is an error wrapping multiple validation
// errors returned by SyncWarehouseResponse.ValidateAll() if the designated
// constraints aren't met.
type SyncWarehouseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncWarehouseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncWarehouseResponseMultiError) AllErrors() []error { return m }

// SyncWarehouseResponseValidationError is the validation error returned by
// SyncWarehouseResponse.Validate if the designated constraints aren't met.
type SyncWarehouseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncWarehouseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncWarehouseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncWarehouseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncWarehouseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncWarehouseResponseValidationError) ErrorName() string {
	return "SyncWarehouseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SyncWarehouseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncWarehouseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncWarehouseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncWarehouseResponseValidationError{}

// Validate checks the field values on CreateLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateLocationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLocationRequestMultiError, or nil if none found.
func (m *CreateLocationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLocationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := CreateLocationRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCompleteName()); l < 1 || l > 255 {
		err := CreateLocationRequestValidationError{
			field:  "CompleteName",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetUsage()); l < 1 || l > 255 {
		err := CreateLocationRequestValidationError{
			field:  "Usage",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsActive

	// no validation rules for IsPreventDone

	// no validation rules for IsSyncStock

	// no validation rules for IsUpdateContactInfo

	// no validation rules for WarehouseId

	// no validation rules for ParentId

	if all {
		switch v := interface{}(m.GetContactInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateLocationRequestValidationError{
					field:  "ContactInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateLocationRequestValidationError{
					field:  "ContactInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContactInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateLocationRequestValidationError{
				field:  "ContactInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ErpId

	if len(errors) > 0 {
		return CreateLocationRequestMultiError(errors)
	}

	return nil
}

// CreateLocationRequestMultiError is an error wrapping multiple validation
// errors returned by CreateLocationRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateLocationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLocationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLocationRequestMultiError) AllErrors() []error { return m }

// CreateLocationRequestValidationError is the validation error returned by
// CreateLocationRequest.Validate if the designated constraints aren't met.
type CreateLocationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLocationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLocationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLocationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLocationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLocationRequestValidationError) ErrorName() string {
	return "CreateLocationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLocationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLocationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLocationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLocationRequestValidationError{}

// Validate checks the field values on CreateLocationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateLocationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLocationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLocationResponseMultiError, or nil if none found.
func (m *CreateLocationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLocationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateLocationResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateLocationResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateLocationResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateLocationResponseMultiError(errors)
	}

	return nil
}

// CreateLocationResponseMultiError is an error wrapping multiple validation
// errors returned by CreateLocationResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateLocationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLocationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLocationResponseMultiError) AllErrors() []error { return m }

// CreateLocationResponseValidationError is the validation error returned by
// CreateLocationResponse.Validate if the designated constraints aren't met.
type CreateLocationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLocationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLocationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLocationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLocationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLocationResponseValidationError) ErrorName() string {
	return "CreateLocationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLocationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLocationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLocationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLocationResponseValidationError{}

// Validate checks the field values on ListLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLocationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLocationRequestMultiError, or nil if none found.
func (m *ListLocationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLocationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetNext() < 0 {
		err := ListLocationRequestValidationError{
			field:  "Next",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLimit(); val <= 0 || val > 100 {
		err := ListLocationRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListLocationRequestMultiError(errors)
	}

	return nil
}

// ListLocationRequestMultiError is an error wrapping multiple validation
// errors returned by ListLocationRequest.ValidateAll() if the designated
// constraints aren't met.
type ListLocationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLocationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLocationRequestMultiError) AllErrors() []error { return m }

// ListLocationRequestValidationError is the validation error returned by
// ListLocationRequest.Validate if the designated constraints aren't met.
type ListLocationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLocationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLocationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLocationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLocationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLocationRequestValidationError) ErrorName() string {
	return "ListLocationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLocationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLocationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLocationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLocationRequestValidationError{}

// Validate checks the field values on ListLocationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLocationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLocationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLocationResponseMultiError, or nil if none found.
func (m *ListLocationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLocationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Len

	// no validation rules for Next

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLocationResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLocationResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLocationResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListLocationResponseMultiError(errors)
	}

	return nil
}

// ListLocationResponseMultiError is an error wrapping multiple validation
// errors returned by ListLocationResponse.ValidateAll() if the designated
// constraints aren't met.
type ListLocationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLocationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLocationResponseMultiError) AllErrors() []error { return m }

// ListLocationResponseValidationError is the validation error returned by
// ListLocationResponse.Validate if the designated constraints aren't met.
type ListLocationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLocationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLocationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLocationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLocationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLocationResponseValidationError) ErrorName() string {
	return "ListLocationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLocationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLocationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLocationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLocationResponseValidationError{}

// Validate checks the field values on GetLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLocationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLocationRequestMultiError, or nil if none found.
func (m *GetLocationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLocationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetLocationRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetLocationRequestMultiError(errors)
	}

	return nil
}

// GetLocationRequestMultiError is an error wrapping multiple validation errors
// returned by GetLocationRequest.ValidateAll() if the designated constraints
// aren't met.
type GetLocationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLocationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLocationRequestMultiError) AllErrors() []error { return m }

// GetLocationRequestValidationError is the validation error returned by
// GetLocationRequest.Validate if the designated constraints aren't met.
type GetLocationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLocationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLocationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLocationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLocationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLocationRequestValidationError) ErrorName() string {
	return "GetLocationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLocationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLocationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLocationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLocationRequestValidationError{}

// Validate checks the field values on GetLocationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLocationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLocationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLocationResponseMultiError, or nil if none found.
func (m *GetLocationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLocationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLocationResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLocationResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLocationResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetLocationResponseMultiError(errors)
	}

	return nil
}

// GetLocationResponseMultiError is an error wrapping multiple validation
// errors returned by GetLocationResponse.ValidateAll() if the designated
// constraints aren't met.
type GetLocationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLocationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLocationResponseMultiError) AllErrors() []error { return m }

// GetLocationResponseValidationError is the validation error returned by
// GetLocationResponse.Validate if the designated constraints aren't met.
type GetLocationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLocationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLocationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLocationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLocationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLocationResponseValidationError) ErrorName() string {
	return "GetLocationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLocationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLocationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLocationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLocationResponseValidationError{}

// Validate checks the field values on UpdateLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateLocationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateLocationRequestMultiError, or nil if none found.
func (m *UpdateLocationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLocationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateLocationRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetData() == nil {
		err := UpdateLocationRequestValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if a := m.GetData(); a != nil {

	}

	if len(errors) > 0 {
		return UpdateLocationRequestMultiError(errors)
	}

	return nil
}

// UpdateLocationRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateLocationRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateLocationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLocationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLocationRequestMultiError) AllErrors() []error { return m }

// UpdateLocationRequestValidationError is the validation error returned by
// UpdateLocationRequest.Validate if the designated constraints aren't met.
type UpdateLocationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLocationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLocationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLocationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLocationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLocationRequestValidationError) ErrorName() string {
	return "UpdateLocationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLocationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLocationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLocationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLocationRequestValidationError{}

// Validate checks the field values on UpdateLocationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateLocationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLocationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateLocationResponseMultiError, or nil if none found.
func (m *UpdateLocationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLocationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateLocationResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateLocationResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLocationResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateLocationResponseMultiError(errors)
	}

	return nil
}

// UpdateLocationResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateLocationResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateLocationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLocationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLocationResponseMultiError) AllErrors() []error { return m }

// UpdateLocationResponseValidationError is the validation error returned by
// UpdateLocationResponse.Validate if the designated constraints aren't met.
type UpdateLocationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLocationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLocationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLocationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLocationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLocationResponseValidationError) ErrorName() string {
	return "UpdateLocationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLocationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLocationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLocationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLocationResponseValidationError{}

// Validate checks the field values on SyncLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SyncLocationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SyncLocationRequestMultiError, or nil if none found.
func (m *SyncLocationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncLocationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetErpId() <= 0 {
		err := SyncLocationRequestValidationError{
			field:  "ErpId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetData() == nil {
		err := SyncLocationRequestValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if a := m.GetData(); a != nil {

	}

	if len(errors) > 0 {
		return SyncLocationRequestMultiError(errors)
	}

	return nil
}

// SyncLocationRequestMultiError is an error wrapping multiple validation
// errors returned by SyncLocationRequest.ValidateAll() if the designated
// constraints aren't met.
type SyncLocationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncLocationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncLocationRequestMultiError) AllErrors() []error { return m }

// SyncLocationRequestValidationError is the validation error returned by
// SyncLocationRequest.Validate if the designated constraints aren't met.
type SyncLocationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncLocationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncLocationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncLocationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncLocationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncLocationRequestValidationError) ErrorName() string {
	return "SyncLocationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SyncLocationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncLocationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncLocationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncLocationRequestValidationError{}

// Validate checks the field values on SyncLocationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SyncLocationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncLocationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SyncLocationResponseMultiError, or nil if none found.
func (m *SyncLocationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncLocationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SyncLocationResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SyncLocationResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SyncLocationResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SyncLocationResponseMultiError(errors)
	}

	return nil
}

// SyncLocationResponseMultiError is an error wrapping multiple validation
// errors returned by SyncLocationResponse.ValidateAll() if the designated
// constraints aren't met.
type SyncLocationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncLocationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncLocationResponseMultiError) AllErrors() []error { return m }

// SyncLocationResponseValidationError is the validation error returned by
// SyncLocationResponse.Validate if the designated constraints aren't met.
type SyncLocationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncLocationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncLocationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncLocationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncLocationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncLocationResponseValidationError) ErrorName() string {
	return "SyncLocationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SyncLocationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncLocationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncLocationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncLocationResponseValidationError{}

// Validate checks the field values on CreateZoneRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateZoneRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateZoneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateZoneRequestMultiError, or nil if none found.
func (m *CreateZoneRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateZoneRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetType()); l < 1 || l > 255 {
		err := CreateZoneRequestValidationError{
			field:  "Type",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := CreateZoneRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPriority() <= 0 {
		err := CreateZoneRequestValidationError{
			field:  "Priority",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWarehouseId() <= 0 {
		err := CreateZoneRequestValidationError{
			field:  "WarehouseId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsActive

	// no validation rules for ErpId

	if len(errors) > 0 {
		return CreateZoneRequestMultiError(errors)
	}

	return nil
}

// CreateZoneRequestMultiError is an error wrapping multiple validation errors
// returned by CreateZoneRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateZoneRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateZoneRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateZoneRequestMultiError) AllErrors() []error { return m }

// CreateZoneRequestValidationError is the validation error returned by
// CreateZoneRequest.Validate if the designated constraints aren't met.
type CreateZoneRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateZoneRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateZoneRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateZoneRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateZoneRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateZoneRequestValidationError) ErrorName() string {
	return "CreateZoneRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateZoneRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateZoneRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateZoneRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateZoneRequestValidationError{}

// Validate checks the field values on CreateZoneResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateZoneResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateZoneResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateZoneResponseMultiError, or nil if none found.
func (m *CreateZoneResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateZoneResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateZoneResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateZoneResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateZoneResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateZoneResponseMultiError(errors)
	}

	return nil
}

// CreateZoneResponseMultiError is an error wrapping multiple validation errors
// returned by CreateZoneResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateZoneResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateZoneResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateZoneResponseMultiError) AllErrors() []error { return m }

// CreateZoneResponseValidationError is the validation error returned by
// CreateZoneResponse.Validate if the designated constraints aren't met.
type CreateZoneResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateZoneResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateZoneResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateZoneResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateZoneResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateZoneResponseValidationError) ErrorName() string {
	return "CreateZoneResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateZoneResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateZoneResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateZoneResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateZoneResponseValidationError{}

// Validate checks the field values on ListZoneRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListZoneRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListZoneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListZoneRequestMultiError, or nil if none found.
func (m *ListZoneRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListZoneRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetNext() < 0 {
		err := ListZoneRequestValidationError{
			field:  "Next",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLimit(); val <= 0 || val > 100 {
		err := ListZoneRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListZoneRequestMultiError(errors)
	}

	return nil
}

// ListZoneRequestMultiError is an error wrapping multiple validation errors
// returned by ListZoneRequest.ValidateAll() if the designated constraints
// aren't met.
type ListZoneRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListZoneRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListZoneRequestMultiError) AllErrors() []error { return m }

// ListZoneRequestValidationError is the validation error returned by
// ListZoneRequest.Validate if the designated constraints aren't met.
type ListZoneRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListZoneRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListZoneRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListZoneRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListZoneRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListZoneRequestValidationError) ErrorName() string { return "ListZoneRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListZoneRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListZoneRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListZoneRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListZoneRequestValidationError{}

// Validate checks the field values on ListZoneResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListZoneResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListZoneResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListZoneResponseMultiError, or nil if none found.
func (m *ListZoneResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListZoneResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Len

	// no validation rules for Next

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListZoneResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListZoneResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListZoneResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListZoneResponseMultiError(errors)
	}

	return nil
}

// ListZoneResponseMultiError is an error wrapping multiple validation errors
// returned by ListZoneResponse.ValidateAll() if the designated constraints
// aren't met.
type ListZoneResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListZoneResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListZoneResponseMultiError) AllErrors() []error { return m }

// ListZoneResponseValidationError is the validation error returned by
// ListZoneResponse.Validate if the designated constraints aren't met.
type ListZoneResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListZoneResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListZoneResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListZoneResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListZoneResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListZoneResponseValidationError) ErrorName() string { return "ListZoneResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListZoneResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListZoneResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListZoneResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListZoneResponseValidationError{}

// Validate checks the field values on GetZoneRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetZoneRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetZoneRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetZoneRequestMultiError,
// or nil if none found.
func (m *GetZoneRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetZoneRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetZoneRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetZoneRequestMultiError(errors)
	}

	return nil
}

// GetZoneRequestMultiError is an error wrapping multiple validation errors
// returned by GetZoneRequest.ValidateAll() if the designated constraints
// aren't met.
type GetZoneRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetZoneRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetZoneRequestMultiError) AllErrors() []error { return m }

// GetZoneRequestValidationError is the validation error returned by
// GetZoneRequest.Validate if the designated constraints aren't met.
type GetZoneRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetZoneRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetZoneRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetZoneRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetZoneRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetZoneRequestValidationError) ErrorName() string { return "GetZoneRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetZoneRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetZoneRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetZoneRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetZoneRequestValidationError{}

// Validate checks the field values on GetZoneResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetZoneResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetZoneResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetZoneResponseMultiError, or nil if none found.
func (m *GetZoneResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetZoneResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetZoneResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetZoneResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetZoneResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetZoneResponseMultiError(errors)
	}

	return nil
}

// GetZoneResponseMultiError is an error wrapping multiple validation errors
// returned by GetZoneResponse.ValidateAll() if the designated constraints
// aren't met.
type GetZoneResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetZoneResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetZoneResponseMultiError) AllErrors() []error { return m }

// GetZoneResponseValidationError is the validation error returned by
// GetZoneResponse.Validate if the designated constraints aren't met.
type GetZoneResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetZoneResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetZoneResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetZoneResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetZoneResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetZoneResponseValidationError) ErrorName() string { return "GetZoneResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetZoneResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetZoneResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetZoneResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetZoneResponseValidationError{}

// Validate checks the field values on UpdateZoneRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateZoneRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateZoneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateZoneRequestMultiError, or nil if none found.
func (m *UpdateZoneRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateZoneRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateZoneRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetData() == nil {
		err := UpdateZoneRequestValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if a := m.GetData(); a != nil {

	}

	if len(errors) > 0 {
		return UpdateZoneRequestMultiError(errors)
	}

	return nil
}

// UpdateZoneRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateZoneRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateZoneRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateZoneRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateZoneRequestMultiError) AllErrors() []error { return m }

// UpdateZoneRequestValidationError is the validation error returned by
// UpdateZoneRequest.Validate if the designated constraints aren't met.
type UpdateZoneRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateZoneRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateZoneRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateZoneRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateZoneRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateZoneRequestValidationError) ErrorName() string {
	return "UpdateZoneRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateZoneRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateZoneRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateZoneRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateZoneRequestValidationError{}

// Validate checks the field values on UpdateZoneResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateZoneResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateZoneResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateZoneResponseMultiError, or nil if none found.
func (m *UpdateZoneResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateZoneResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateZoneResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateZoneResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateZoneResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateZoneResponseMultiError(errors)
	}

	return nil
}

// UpdateZoneResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateZoneResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateZoneResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateZoneResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateZoneResponseMultiError) AllErrors() []error { return m }

// UpdateZoneResponseValidationError is the validation error returned by
// UpdateZoneResponse.Validate if the designated constraints aren't met.
type UpdateZoneResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateZoneResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateZoneResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateZoneResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateZoneResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateZoneResponseValidationError) ErrorName() string {
	return "UpdateZoneResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateZoneResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateZoneResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateZoneResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateZoneResponseValidationError{}

// Validate checks the field values on SyncZoneRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SyncZoneRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncZoneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SyncZoneRequestMultiError, or nil if none found.
func (m *SyncZoneRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncZoneRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetErpId() <= 0 {
		err := SyncZoneRequestValidationError{
			field:  "ErpId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetData() == nil {
		err := SyncZoneRequestValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if a := m.GetData(); a != nil {

	}

	if len(errors) > 0 {
		return SyncZoneRequestMultiError(errors)
	}

	return nil
}

// SyncZoneRequestMultiError is an error wrapping multiple validation errors
// returned by SyncZoneRequest.ValidateAll() if the designated constraints
// aren't met.
type SyncZoneRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncZoneRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncZoneRequestMultiError) AllErrors() []error { return m }

// SyncZoneRequestValidationError is the validation error returned by
// SyncZoneRequest.Validate if the designated constraints aren't met.
type SyncZoneRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncZoneRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncZoneRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncZoneRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncZoneRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncZoneRequestValidationError) ErrorName() string { return "SyncZoneRequestValidationError" }

// Error satisfies the builtin error interface
func (e SyncZoneRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncZoneRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncZoneRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncZoneRequestValidationError{}

// Validate checks the field values on SyncZoneResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SyncZoneResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncZoneResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SyncZoneResponseMultiError, or nil if none found.
func (m *SyncZoneResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncZoneResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SyncZoneResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SyncZoneResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SyncZoneResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SyncZoneResponseMultiError(errors)
	}

	return nil
}

// SyncZoneResponseMultiError is an error wrapping multiple validation errors
// returned by SyncZoneResponse.ValidateAll() if the designated constraints
// aren't met.
type SyncZoneResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncZoneResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncZoneResponseMultiError) AllErrors() []error { return m }

// SyncZoneResponseValidationError is the validation error returned by
// SyncZoneResponse.Validate if the designated constraints aren't met.
type SyncZoneResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncZoneResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncZoneResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncZoneResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncZoneResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncZoneResponseValidationError) ErrorName() string { return "SyncZoneResponseValidationError" }

// Error satisfies the builtin error interface
func (e SyncZoneResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncZoneResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncZoneResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncZoneResponseValidationError{}

// Validate checks the field values on CreateShelfRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShelfRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShelfRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShelfRequestMultiError, or nil if none found.
func (m *CreateShelfRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShelfRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetCode()); l < 1 || l > 255 {
		err := CreateShelfRequestValidationError{
			field:  "Code",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsActive

	if l := utf8.RuneCountInString(m.GetType()); l < 1 || l > 255 {
		err := CreateShelfRequestValidationError{
			field:  "Type",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetSizeType()); l < 1 || l > 255 {
		err := CreateShelfRequestValidationError{
			field:  "SizeType",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Length

	// no validation rules for Width

	// no validation rules for Height

	if m.GetWarehouseId() <= 0 {
		err := CreateShelfRequestValidationError{
			field:  "WarehouseId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLocationId() <= 0 {
		err := CreateShelfRequestValidationError{
			field:  "LocationId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ZoneId

	if all {
		switch v := interface{}(m.GetExtraAttrs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateShelfRequestValidationError{
					field:  "ExtraAttrs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateShelfRequestValidationError{
					field:  "ExtraAttrs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtraAttrs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateShelfRequestValidationError{
				field:  "ExtraAttrs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ErpId

	if len(errors) > 0 {
		return CreateShelfRequestMultiError(errors)
	}

	return nil
}

// CreateShelfRequestMultiError is an error wrapping multiple validation errors
// returned by CreateShelfRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateShelfRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShelfRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShelfRequestMultiError) AllErrors() []error { return m }

// CreateShelfRequestValidationError is the validation error returned by
// CreateShelfRequest.Validate if the designated constraints aren't met.
type CreateShelfRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShelfRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShelfRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShelfRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShelfRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShelfRequestValidationError) ErrorName() string {
	return "CreateShelfRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShelfRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShelfRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShelfRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShelfRequestValidationError{}

// Validate checks the field values on CreateShelfResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShelfResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShelfResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShelfResponseMultiError, or nil if none found.
func (m *CreateShelfResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShelfResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateShelfResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateShelfResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateShelfResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateShelfResponseMultiError(errors)
	}

	return nil
}

// CreateShelfResponseMultiError is an error wrapping multiple validation
// errors returned by CreateShelfResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateShelfResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShelfResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShelfResponseMultiError) AllErrors() []error { return m }

// CreateShelfResponseValidationError is the validation error returned by
// CreateShelfResponse.Validate if the designated constraints aren't met.
type CreateShelfResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShelfResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShelfResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShelfResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShelfResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShelfResponseValidationError) ErrorName() string {
	return "CreateShelfResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShelfResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShelfResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShelfResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShelfResponseValidationError{}

// Validate checks the field values on ListShelfRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListShelfRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListShelfRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListShelfRequestMultiError, or nil if none found.
func (m *ListShelfRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListShelfRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetNext() < 0 {
		err := ListShelfRequestValidationError{
			field:  "Next",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLimit(); val <= 0 || val > 100 {
		err := ListShelfRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListShelfRequestMultiError(errors)
	}

	return nil
}

// ListShelfRequestMultiError is an error wrapping multiple validation errors
// returned by ListShelfRequest.ValidateAll() if the designated constraints
// aren't met.
type ListShelfRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListShelfRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListShelfRequestMultiError) AllErrors() []error { return m }

// ListShelfRequestValidationError is the validation error returned by
// ListShelfRequest.Validate if the designated constraints aren't met.
type ListShelfRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListShelfRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListShelfRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListShelfRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListShelfRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListShelfRequestValidationError) ErrorName() string { return "ListShelfRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListShelfRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListShelfRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListShelfRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListShelfRequestValidationError{}

// Validate checks the field values on ListShelfResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListShelfResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListShelfResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListShelfResponseMultiError, or nil if none found.
func (m *ListShelfResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListShelfResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Len

	// no validation rules for Next

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListShelfResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListShelfResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListShelfResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListShelfResponseMultiError(errors)
	}

	return nil
}

// ListShelfResponseMultiError is an error wrapping multiple validation errors
// returned by ListShelfResponse.ValidateAll() if the designated constraints
// aren't met.
type ListShelfResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListShelfResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListShelfResponseMultiError) AllErrors() []error { return m }

// ListShelfResponseValidationError is the validation error returned by
// ListShelfResponse.Validate if the designated constraints aren't met.
type ListShelfResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListShelfResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListShelfResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListShelfResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListShelfResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListShelfResponseValidationError) ErrorName() string {
	return "ListShelfResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListShelfResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListShelfResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListShelfResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListShelfResponseValidationError{}

// Validate checks the field values on GetShelfRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetShelfRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShelfRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShelfRequestMultiError, or nil if none found.
func (m *GetShelfRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShelfRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetShelfRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetShelfRequestMultiError(errors)
	}

	return nil
}

// GetShelfRequestMultiError is an error wrapping multiple validation errors
// returned by GetShelfRequest.ValidateAll() if the designated constraints
// aren't met.
type GetShelfRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShelfRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShelfRequestMultiError) AllErrors() []error { return m }

// GetShelfRequestValidationError is the validation error returned by
// GetShelfRequest.Validate if the designated constraints aren't met.
type GetShelfRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShelfRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShelfRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShelfRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShelfRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShelfRequestValidationError) ErrorName() string { return "GetShelfRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetShelfRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShelfRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShelfRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShelfRequestValidationError{}

// Validate checks the field values on GetShelfResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetShelfResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShelfResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShelfResponseMultiError, or nil if none found.
func (m *GetShelfResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShelfResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetShelfResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetShelfResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetShelfResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetShelfResponseMultiError(errors)
	}

	return nil
}

// GetShelfResponseMultiError is an error wrapping multiple validation errors
// returned by GetShelfResponse.ValidateAll() if the designated constraints
// aren't met.
type GetShelfResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShelfResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShelfResponseMultiError) AllErrors() []error { return m }

// GetShelfResponseValidationError is the validation error returned by
// GetShelfResponse.Validate if the designated constraints aren't met.
type GetShelfResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShelfResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShelfResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShelfResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShelfResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShelfResponseValidationError) ErrorName() string { return "GetShelfResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetShelfResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShelfResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShelfResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShelfResponseValidationError{}

// Validate checks the field values on UpdateShelfRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateShelfRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateShelfRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateShelfRequestMultiError, or nil if none found.
func (m *UpdateShelfRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateShelfRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateShelfRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetData() == nil {
		err := UpdateShelfRequestValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if a := m.GetData(); a != nil {

	}

	if len(errors) > 0 {
		return UpdateShelfRequestMultiError(errors)
	}

	return nil
}

// UpdateShelfRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateShelfRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateShelfRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateShelfRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateShelfRequestMultiError) AllErrors() []error { return m }

// UpdateShelfRequestValidationError is the validation error returned by
// UpdateShelfRequest.Validate if the designated constraints aren't met.
type UpdateShelfRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateShelfRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateShelfRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateShelfRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateShelfRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateShelfRequestValidationError) ErrorName() string {
	return "UpdateShelfRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateShelfRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateShelfRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateShelfRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateShelfRequestValidationError{}

// Validate checks the field values on UpdateShelfResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateShelfResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateShelfResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateShelfResponseMultiError, or nil if none found.
func (m *UpdateShelfResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateShelfResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateShelfResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateShelfResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateShelfResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateShelfResponseMultiError(errors)
	}

	return nil
}

// UpdateShelfResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateShelfResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateShelfResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateShelfResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateShelfResponseMultiError) AllErrors() []error { return m }

// UpdateShelfResponseValidationError is the validation error returned by
// UpdateShelfResponse.Validate if the designated constraints aren't met.
type UpdateShelfResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateShelfResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateShelfResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateShelfResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateShelfResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateShelfResponseValidationError) ErrorName() string {
	return "UpdateShelfResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateShelfResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateShelfResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateShelfResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateShelfResponseValidationError{}

// Validate checks the field values on SyncShelfRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SyncShelfRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncShelfRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SyncShelfRequestMultiError, or nil if none found.
func (m *SyncShelfRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncShelfRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetErpId() <= 0 {
		err := SyncShelfRequestValidationError{
			field:  "ErpId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetData() == nil {
		err := SyncShelfRequestValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if a := m.GetData(); a != nil {

	}

	if len(errors) > 0 {
		return SyncShelfRequestMultiError(errors)
	}

	return nil
}

// SyncShelfRequestMultiError is an error wrapping multiple validation errors
// returned by SyncShelfRequest.ValidateAll() if the designated constraints
// aren't met.
type SyncShelfRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncShelfRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncShelfRequestMultiError) AllErrors() []error { return m }

// SyncShelfRequestValidationError is the validation error returned by
// SyncShelfRequest.Validate if the designated constraints aren't met.
type SyncShelfRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncShelfRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncShelfRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncShelfRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncShelfRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncShelfRequestValidationError) ErrorName() string { return "SyncShelfRequestValidationError" }

// Error satisfies the builtin error interface
func (e SyncShelfRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncShelfRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncShelfRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncShelfRequestValidationError{}

// Validate checks the field values on SyncShelfResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SyncShelfResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncShelfResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SyncShelfResponseMultiError, or nil if none found.
func (m *SyncShelfResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncShelfResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SyncShelfResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SyncShelfResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SyncShelfResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SyncShelfResponseMultiError(errors)
	}

	return nil
}

// SyncShelfResponseMultiError is an error wrapping multiple validation errors
// returned by SyncShelfResponse.ValidateAll() if the designated constraints
// aren't met.
type SyncShelfResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncShelfResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncShelfResponseMultiError) AllErrors() []error { return m }

// SyncShelfResponseValidationError is the validation error returned by
// SyncShelfResponse.Validate if the designated constraints aren't met.
type SyncShelfResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncShelfResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncShelfResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncShelfResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncShelfResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncShelfResponseValidationError) ErrorName() string {
	return "SyncShelfResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SyncShelfResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncShelfResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncShelfResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncShelfResponseValidationError{}

// Validate checks the field values on CreateToteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateToteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateToteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateToteRequestMultiError, or nil if none found.
func (m *CreateToteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateToteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetCode()); l < 1 || l > 255 {
		err := CreateToteRequestValidationError{
			field:  "Code",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsActive

	if m.GetWarehouseId() <= 0 {
		err := CreateToteRequestValidationError{
			field:  "WarehouseId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLocationId() <= 0 {
		err := CreateToteRequestValidationError{
			field:  "LocationId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetExtraAttrs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateToteRequestValidationError{
					field:  "ExtraAttrs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateToteRequestValidationError{
					field:  "ExtraAttrs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtraAttrs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateToteRequestValidationError{
				field:  "ExtraAttrs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ErpId

	if len(errors) > 0 {
		return CreateToteRequestMultiError(errors)
	}

	return nil
}

// CreateToteRequestMultiError is an error wrapping multiple validation errors
// returned by CreateToteRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateToteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateToteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateToteRequestMultiError) AllErrors() []error { return m }

// CreateToteRequestValidationError is the validation error returned by
// CreateToteRequest.Validate if the designated constraints aren't met.
type CreateToteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateToteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateToteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateToteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateToteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateToteRequestValidationError) ErrorName() string {
	return "CreateToteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateToteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateToteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateToteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateToteRequestValidationError{}

// Validate checks the field values on CreateToteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateToteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateToteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateToteResponseMultiError, or nil if none found.
func (m *CreateToteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateToteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateToteResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateToteResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateToteResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateToteResponseMultiError(errors)
	}

	return nil
}

// CreateToteResponseMultiError is an error wrapping multiple validation errors
// returned by CreateToteResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateToteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateToteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateToteResponseMultiError) AllErrors() []error { return m }

// CreateToteResponseValidationError is the validation error returned by
// CreateToteResponse.Validate if the designated constraints aren't met.
type CreateToteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateToteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateToteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateToteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateToteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateToteResponseValidationError) ErrorName() string {
	return "CreateToteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateToteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateToteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateToteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateToteResponseValidationError{}

// Validate checks the field values on ListToteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListToteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListToteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListToteRequestMultiError, or nil if none found.
func (m *ListToteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListToteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetNext() < 0 {
		err := ListToteRequestValidationError{
			field:  "Next",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLimit(); val <= 0 || val > 100 {
		err := ListToteRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListToteRequestMultiError(errors)
	}

	return nil
}

// ListToteRequestMultiError is an error wrapping multiple validation errors
// returned by ListToteRequest.ValidateAll() if the designated constraints
// aren't met.
type ListToteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListToteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListToteRequestMultiError) AllErrors() []error { return m }

// ListToteRequestValidationError is the validation error returned by
// ListToteRequest.Validate if the designated constraints aren't met.
type ListToteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListToteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListToteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListToteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListToteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListToteRequestValidationError) ErrorName() string { return "ListToteRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListToteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListToteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListToteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListToteRequestValidationError{}

// Validate checks the field values on ListToteResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListToteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListToteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListToteResponseMultiError, or nil if none found.
func (m *ListToteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListToteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Len

	// no validation rules for Next

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListToteResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListToteResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListToteResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListToteResponseMultiError(errors)
	}

	return nil
}

// ListToteResponseMultiError is an error wrapping multiple validation errors
// returned by ListToteResponse.ValidateAll() if the designated constraints
// aren't met.
type ListToteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListToteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListToteResponseMultiError) AllErrors() []error { return m }

// ListToteResponseValidationError is the validation error returned by
// ListToteResponse.Validate if the designated constraints aren't met.
type ListToteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListToteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListToteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListToteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListToteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListToteResponseValidationError) ErrorName() string { return "ListToteResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListToteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListToteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListToteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListToteResponseValidationError{}

// Validate checks the field values on GetToteRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetToteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetToteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetToteRequestMultiError,
// or nil if none found.
func (m *GetToteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetToteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetToteRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetToteRequestMultiError(errors)
	}

	return nil
}

// GetToteRequestMultiError is an error wrapping multiple validation errors
// returned by GetToteRequest.ValidateAll() if the designated constraints
// aren't met.
type GetToteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetToteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetToteRequestMultiError) AllErrors() []error { return m }

// GetToteRequestValidationError is the validation error returned by
// GetToteRequest.Validate if the designated constraints aren't met.
type GetToteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetToteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetToteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetToteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetToteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetToteRequestValidationError) ErrorName() string { return "GetToteRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetToteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetToteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetToteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetToteRequestValidationError{}

// Validate checks the field values on GetToteResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetToteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetToteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetToteResponseMultiError, or nil if none found.
func (m *GetToteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetToteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetToteResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetToteResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetToteResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetToteResponseMultiError(errors)
	}

	return nil
}

// GetToteResponseMultiError is an error wrapping multiple validation errors
// returned by GetToteResponse.ValidateAll() if the designated constraints
// aren't met.
type GetToteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetToteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetToteResponseMultiError) AllErrors() []error { return m }

// GetToteResponseValidationError is the validation error returned by
// GetToteResponse.Validate if the designated constraints aren't met.
type GetToteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetToteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetToteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetToteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetToteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetToteResponseValidationError) ErrorName() string { return "GetToteResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetToteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetToteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetToteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetToteResponseValidationError{}

// Validate checks the field values on UpdateToteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateToteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateToteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateToteRequestMultiError, or nil if none found.
func (m *UpdateToteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateToteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateToteRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetData() == nil {
		err := UpdateToteRequestValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if a := m.GetData(); a != nil {

	}

	if len(errors) > 0 {
		return UpdateToteRequestMultiError(errors)
	}

	return nil
}

// UpdateToteRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateToteRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateToteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateToteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateToteRequestMultiError) AllErrors() []error { return m }

// UpdateToteRequestValidationError is the validation error returned by
// UpdateToteRequest.Validate if the designated constraints aren't met.
type UpdateToteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateToteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateToteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateToteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateToteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateToteRequestValidationError) ErrorName() string {
	return "UpdateToteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateToteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateToteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateToteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateToteRequestValidationError{}

// Validate checks the field values on UpdateToteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateToteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateToteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateToteResponseMultiError, or nil if none found.
func (m *UpdateToteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateToteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateToteResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateToteResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateToteResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateToteResponseMultiError(errors)
	}

	return nil
}

// UpdateToteResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateToteResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateToteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateToteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateToteResponseMultiError) AllErrors() []error { return m }

// UpdateToteResponseValidationError is the validation error returned by
// UpdateToteResponse.Validate if the designated constraints aren't met.
type UpdateToteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateToteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateToteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateToteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateToteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateToteResponseValidationError) ErrorName() string {
	return "UpdateToteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateToteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateToteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateToteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateToteResponseValidationError{}

// Validate checks the field values on SyncToteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SyncToteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncToteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SyncToteRequestMultiError, or nil if none found.
func (m *SyncToteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncToteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetErpId() <= 0 {
		err := SyncToteRequestValidationError{
			field:  "ErpId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetData() == nil {
		err := SyncToteRequestValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if a := m.GetData(); a != nil {

	}

	if len(errors) > 0 {
		return SyncToteRequestMultiError(errors)
	}

	return nil
}

// SyncToteRequestMultiError is an error wrapping multiple validation errors
// returned by SyncToteRequest.ValidateAll() if the designated constraints
// aren't met.
type SyncToteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncToteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncToteRequestMultiError) AllErrors() []error { return m }

// SyncToteRequestValidationError is the validation error returned by
// SyncToteRequest.Validate if the designated constraints aren't met.
type SyncToteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncToteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncToteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncToteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncToteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncToteRequestValidationError) ErrorName() string { return "SyncToteRequestValidationError" }

// Error satisfies the builtin error interface
func (e SyncToteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncToteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncToteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncToteRequestValidationError{}

// Validate checks the field values on SyncToteResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SyncToteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncToteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SyncToteResponseMultiError, or nil if none found.
func (m *SyncToteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncToteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SyncToteResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SyncToteResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SyncToteResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SyncToteResponseMultiError(errors)
	}

	return nil
}

// SyncToteResponseMultiError is an error wrapping multiple validation errors
// returned by SyncToteResponse.ValidateAll() if the designated constraints
// aren't met.
type SyncToteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncToteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncToteResponseMultiError) AllErrors() []error { return m }

// SyncToteResponseValidationError is the validation error returned by
// SyncToteResponse.Validate if the designated constraints aren't met.
type SyncToteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncToteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncToteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncToteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncToteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncToteResponseValidationError) ErrorName() string { return "SyncToteResponseValidationError" }

// Error satisfies the builtin error interface
func (e SyncToteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncToteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncToteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncToteResponseValidationError{}

// Validate checks the field values on CreateProductUomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductUomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductUomRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductUomRequestMultiError, or nil if none found.
func (m *CreateProductUomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductUomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUnit()); l < 1 || l > 255 {
		err := CreateProductUomRequestValidationError{
			field:  "Unit",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCode()); l < 1 || l > 255 {
		err := CreateProductUomRequestValidationError{
			field:  "Code",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsActive

	// no validation rules for Rounding

	// no validation rules for Factor

	// no validation rules for ErpId

	if len(errors) > 0 {
		return CreateProductUomRequestMultiError(errors)
	}

	return nil
}

// CreateProductUomRequestMultiError is an error wrapping multiple validation
// errors returned by CreateProductUomRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProductUomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductUomRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductUomRequestMultiError) AllErrors() []error { return m }

// CreateProductUomRequestValidationError is the validation error returned by
// CreateProductUomRequest.Validate if the designated constraints aren't met.
type CreateProductUomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductUomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductUomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductUomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductUomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductUomRequestValidationError) ErrorName() string {
	return "CreateProductUomRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductUomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductUomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductUomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductUomRequestValidationError{}

// Validate checks the field values on CreateProductUomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductUomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductUomResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductUomResponseMultiError, or nil if none found.
func (m *CreateProductUomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductUomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProductUomResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProductUomResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProductUomResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProductUomResponseMultiError(errors)
	}

	return nil
}

// CreateProductUomResponseMultiError is an error wrapping multiple validation
// errors returned by CreateProductUomResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateProductUomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductUomResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductUomResponseMultiError) AllErrors() []error { return m }

// CreateProductUomResponseValidationError is the validation error returned by
// CreateProductUomResponse.Validate if the designated constraints aren't met.
type CreateProductUomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductUomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductUomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductUomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductUomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductUomResponseValidationError) ErrorName() string {
	return "CreateProductUomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductUomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductUomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductUomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductUomResponseValidationError{}

// Validate checks the field values on GetProductUomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductUomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductUomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductUomRequestMultiError, or nil if none found.
func (m *GetProductUomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductUomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetProductUomRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetProductUomRequestMultiError(errors)
	}

	return nil
}

// GetProductUomRequestMultiError is an error wrapping multiple validation
// errors returned by GetProductUomRequest.ValidateAll() if the designated
// constraints aren't met.
type GetProductUomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductUomRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductUomRequestMultiError) AllErrors() []error { return m }

// GetProductUomRequestValidationError is the validation error returned by
// GetProductUomRequest.Validate if the designated constraints aren't met.
type GetProductUomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductUomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductUomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductUomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductUomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductUomRequestValidationError) ErrorName() string {
	return "GetProductUomRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductUomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductUomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductUomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductUomRequestValidationError{}

// Validate checks the field values on GetProductUomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductUomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductUomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductUomResponseMultiError, or nil if none found.
func (m *GetProductUomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductUomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProductUomResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProductUomResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProductUomResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProductUomResponseMultiError(errors)
	}

	return nil
}

// GetProductUomResponseMultiError is an error wrapping multiple validation
// errors returned by GetProductUomResponse.ValidateAll() if the designated
// constraints aren't met.
type GetProductUomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductUomResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductUomResponseMultiError) AllErrors() []error { return m }

// GetProductUomResponseValidationError is the validation error returned by
// GetProductUomResponse.Validate if the designated constraints aren't met.
type GetProductUomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductUomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductUomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductUomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductUomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductUomResponseValidationError) ErrorName() string {
	return "GetProductUomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductUomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductUomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductUomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductUomResponseValidationError{}

// Validate checks the field values on ListProductUomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProductUomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProductUomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProductUomRequestMultiError, or nil if none found.
func (m *ListProductUomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProductUomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetNext() < 0 {
		err := ListProductUomRequestValidationError{
			field:  "Next",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLimit(); val <= 0 || val > 100 {
		err := ListProductUomRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListProductUomRequestMultiError(errors)
	}

	return nil
}

// ListProductUomRequestMultiError is an error wrapping multiple validation
// errors returned by ListProductUomRequest.ValidateAll() if the designated
// constraints aren't met.
type ListProductUomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProductUomRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProductUomRequestMultiError) AllErrors() []error { return m }

// ListProductUomRequestValidationError is the validation error returned by
// ListProductUomRequest.Validate if the designated constraints aren't met.
type ListProductUomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductUomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductUomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductUomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductUomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductUomRequestValidationError) ErrorName() string {
	return "ListProductUomRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductUomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductUomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductUomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductUomRequestValidationError{}

// Validate checks the field values on ListProductUomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProductUomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProductUomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProductUomResponseMultiError, or nil if none found.
func (m *ListProductUomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProductUomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Len

	// no validation rules for Next

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProductUomResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProductUomResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProductUomResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProductUomResponseMultiError(errors)
	}

	return nil
}

// ListProductUomResponseMultiError is an error wrapping multiple validation
// errors returned by ListProductUomResponse.ValidateAll() if the designated
// constraints aren't met.
type ListProductUomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProductUomResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProductUomResponseMultiError) AllErrors() []error { return m }

// ListProductUomResponseValidationError is the validation error returned by
// ListProductUomResponse.Validate if the designated constraints aren't met.
type ListProductUomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductUomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductUomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductUomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductUomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductUomResponseValidationError) ErrorName() string {
	return "ListProductUomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductUomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductUomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductUomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductUomResponseValidationError{}

// Validate checks the field values on UpdateProductUomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProductUomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductUomRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProductUomRequestMultiError, or nil if none found.
func (m *UpdateProductUomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductUomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateProductUomRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetData() == nil {
		err := UpdateProductUomRequestValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if a := m.GetData(); a != nil {

	}

	if len(errors) > 0 {
		return UpdateProductUomRequestMultiError(errors)
	}

	return nil
}

// UpdateProductUomRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateProductUomRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateProductUomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductUomRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductUomRequestMultiError) AllErrors() []error { return m }

// UpdateProductUomRequestValidationError is the validation error returned by
// UpdateProductUomRequest.Validate if the designated constraints aren't met.
type UpdateProductUomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductUomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductUomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductUomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductUomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductUomRequestValidationError) ErrorName() string {
	return "UpdateProductUomRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductUomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductUomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductUomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductUomRequestValidationError{}

// Validate checks the field values on UpdateProductUomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProductUomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductUomResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProductUomResponseMultiError, or nil if none found.
func (m *UpdateProductUomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductUomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProductUomResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProductUomResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProductUomResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProductUomResponseMultiError(errors)
	}

	return nil
}

// UpdateProductUomResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateProductUomResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateProductUomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductUomResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductUomResponseMultiError) AllErrors() []error { return m }

// UpdateProductUomResponseValidationError is the validation error returned by
// UpdateProductUomResponse.Validate if the designated constraints aren't met.
type UpdateProductUomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductUomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductUomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductUomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductUomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductUomResponseValidationError) ErrorName() string {
	return "UpdateProductUomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductUomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductUomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductUomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductUomResponseValidationError{}

// Validate checks the field values on CreateProductBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductBrandRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductBrandRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductBrandRequestMultiError, or nil if none found.
func (m *CreateProductBrandRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductBrandRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := CreateProductBrandRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCode()); l < 0 || l > 255 {
		err := CreateProductBrandRequestValidationError{
			field:  "Code",
			reason: "value length must be between 0 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	// no validation rules for IsActive

	// no validation rules for ErpId

	if len(errors) > 0 {
		return CreateProductBrandRequestMultiError(errors)
	}

	return nil
}

// CreateProductBrandRequestMultiError is an error wrapping multiple validation
// errors returned by CreateProductBrandRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateProductBrandRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductBrandRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductBrandRequestMultiError) AllErrors() []error { return m }

// CreateProductBrandRequestValidationError is the validation error returned by
// CreateProductBrandRequest.Validate if the designated constraints aren't met.
type CreateProductBrandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductBrandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductBrandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductBrandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductBrandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductBrandRequestValidationError) ErrorName() string {
	return "CreateProductBrandRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductBrandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductBrandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductBrandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductBrandRequestValidationError{}

// Validate checks the field values on CreateProductBrandResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductBrandResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductBrandResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductBrandResponseMultiError, or nil if none found.
func (m *CreateProductBrandResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductBrandResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProductBrandResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProductBrandResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProductBrandResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProductBrandResponseMultiError(errors)
	}

	return nil
}

// CreateProductBrandResponseMultiError is an error wrapping multiple
// validation errors returned by CreateProductBrandResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateProductBrandResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductBrandResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductBrandResponseMultiError) AllErrors() []error { return m }

// CreateProductBrandResponseValidationError is the validation error returned
// by CreateProductBrandResponse.Validate if the designated constraints aren't met.
type CreateProductBrandResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductBrandResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductBrandResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductBrandResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductBrandResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductBrandResponseValidationError) ErrorName() string {
	return "CreateProductBrandResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductBrandResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductBrandResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductBrandResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductBrandResponseValidationError{}

// Validate checks the field values on GetProductBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductBrandRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductBrandRequestMultiError, or nil if none found.
func (m *GetProductBrandRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductBrandRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetProductBrandRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetProductBrandRequestMultiError(errors)
	}

	return nil
}

// GetProductBrandRequestMultiError is an error wrapping multiple validation
// errors returned by GetProductBrandRequest.ValidateAll() if the designated
// constraints aren't met.
type GetProductBrandRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductBrandRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductBrandRequestMultiError) AllErrors() []error { return m }

// GetProductBrandRequestValidationError is the validation error returned by
// GetProductBrandRequest.Validate if the designated constraints aren't met.
type GetProductBrandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductBrandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductBrandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductBrandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductBrandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductBrandRequestValidationError) ErrorName() string {
	return "GetProductBrandRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductBrandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductBrandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductBrandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductBrandRequestValidationError{}

// Validate checks the field values on GetProductBrandResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductBrandResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductBrandResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductBrandResponseMultiError, or nil if none found.
func (m *GetProductBrandResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductBrandResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProductBrandResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProductBrandResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProductBrandResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProductBrandResponseMultiError(errors)
	}

	return nil
}

// GetProductBrandResponseMultiError is an error wrapping multiple validation
// errors returned by GetProductBrandResponse.ValidateAll() if the designated
// constraints aren't met.
type GetProductBrandResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductBrandResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductBrandResponseMultiError) AllErrors() []error { return m }

// GetProductBrandResponseValidationError is the validation error returned by
// GetProductBrandResponse.Validate if the designated constraints aren't met.
type GetProductBrandResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductBrandResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductBrandResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductBrandResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductBrandResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductBrandResponseValidationError) ErrorName() string {
	return "GetProductBrandResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductBrandResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductBrandResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductBrandResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductBrandResponseValidationError{}

// Validate checks the field values on ListProductBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProductBrandRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProductBrandRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProductBrandRequestMultiError, or nil if none found.
func (m *ListProductBrandRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProductBrandRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetNext() < 0 {
		err := ListProductBrandRequestValidationError{
			field:  "Next",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLimit(); val <= 0 || val > 100 {
		err := ListProductBrandRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListProductBrandRequestMultiError(errors)
	}

	return nil
}

// ListProductBrandRequestMultiError is an error wrapping multiple validation
// errors returned by ListProductBrandRequest.ValidateAll() if the designated
// constraints aren't met.
type ListProductBrandRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProductBrandRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProductBrandRequestMultiError) AllErrors() []error { return m }

// ListProductBrandRequestValidationError is the validation error returned by
// ListProductBrandRequest.Validate if the designated constraints aren't met.
type ListProductBrandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductBrandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductBrandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductBrandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductBrandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductBrandRequestValidationError) ErrorName() string {
	return "ListProductBrandRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductBrandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductBrandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductBrandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductBrandRequestValidationError{}

// Validate checks the field values on ListProductBrandResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProductBrandResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProductBrandResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProductBrandResponseMultiError, or nil if none found.
func (m *ListProductBrandResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProductBrandResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Len

	// no validation rules for Next

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProductBrandResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProductBrandResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProductBrandResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProductBrandResponseMultiError(errors)
	}

	return nil
}

// ListProductBrandResponseMultiError is an error wrapping multiple validation
// errors returned by ListProductBrandResponse.ValidateAll() if the designated
// constraints aren't met.
type ListProductBrandResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProductBrandResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProductBrandResponseMultiError) AllErrors() []error { return m }

// ListProductBrandResponseValidationError is the validation error returned by
// ListProductBrandResponse.Validate if the designated constraints aren't met.
type ListProductBrandResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductBrandResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductBrandResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductBrandResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductBrandResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductBrandResponseValidationError) ErrorName() string {
	return "ListProductBrandResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductBrandResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductBrandResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductBrandResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductBrandResponseValidationError{}

// Validate checks the field values on UpdateProductBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProductBrandRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductBrandRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProductBrandRequestMultiError, or nil if none found.
func (m *UpdateProductBrandRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductBrandRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateProductBrandRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetData() == nil {
		err := UpdateProductBrandRequestValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if a := m.GetData(); a != nil {

	}

	if len(errors) > 0 {
		return UpdateProductBrandRequestMultiError(errors)
	}

	return nil
}

// UpdateProductBrandRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateProductBrandRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateProductBrandRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductBrandRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductBrandRequestMultiError) AllErrors() []error { return m }

// UpdateProductBrandRequestValidationError is the validation error returned by
// UpdateProductBrandRequest.Validate if the designated constraints aren't met.
type UpdateProductBrandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductBrandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductBrandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductBrandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductBrandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductBrandRequestValidationError) ErrorName() string {
	return "UpdateProductBrandRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductBrandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductBrandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductBrandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductBrandRequestValidationError{}

// Validate checks the field values on UpdateProductBrandResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProductBrandResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductBrandResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProductBrandResponseMultiError, or nil if none found.
func (m *UpdateProductBrandResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductBrandResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProductBrandResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProductBrandResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProductBrandResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProductBrandResponseMultiError(errors)
	}

	return nil
}

// UpdateProductBrandResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateProductBrandResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateProductBrandResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductBrandResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductBrandResponseMultiError) AllErrors() []error { return m }

// UpdateProductBrandResponseValidationError is the validation error returned
// by UpdateProductBrandResponse.Validate if the designated constraints aren't met.
type UpdateProductBrandResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductBrandResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductBrandResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductBrandResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductBrandResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductBrandResponseValidationError) ErrorName() string {
	return "UpdateProductBrandResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductBrandResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductBrandResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductBrandResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductBrandResponseValidationError{}

// Validate checks the field values on CreateProductCategoryGroupRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateProductCategoryGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductCategoryGroupRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateProductCategoryGroupRequestMultiError, or nil if none found.
func (m *CreateProductCategoryGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductCategoryGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := CreateProductCategoryGroupRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCode()); l < 1 || l > 255 {
		err := CreateProductCategoryGroupRequestValidationError{
			field:  "Code",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ErpId

	if len(errors) > 0 {
		return CreateProductCategoryGroupRequestMultiError(errors)
	}

	return nil
}

// CreateProductCategoryGroupRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateProductCategoryGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProductCategoryGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductCategoryGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductCategoryGroupRequestMultiError) AllErrors() []error { return m }

// CreateProductCategoryGroupRequestValidationError is the validation error
// returned by CreateProductCategoryGroupRequest.Validate if the designated
// constraints aren't met.
type CreateProductCategoryGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductCategoryGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductCategoryGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductCategoryGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductCategoryGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductCategoryGroupRequestValidationError) ErrorName() string {
	return "CreateProductCategoryGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductCategoryGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductCategoryGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductCategoryGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductCategoryGroupRequestValidationError{}

// Validate checks the field values on CreateProductCategoryGroupResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateProductCategoryGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductCategoryGroupResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateProductCategoryGroupResponseMultiError, or nil if none found.
func (m *CreateProductCategoryGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductCategoryGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProductCategoryGroupResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProductCategoryGroupResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProductCategoryGroupResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProductCategoryGroupResponseMultiError(errors)
	}

	return nil
}

// CreateProductCategoryGroupResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateProductCategoryGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateProductCategoryGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductCategoryGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductCategoryGroupResponseMultiError) AllErrors() []error { return m }

// CreateProductCategoryGroupResponseValidationError is the validation error
// returned by CreateProductCategoryGroupResponse.Validate if the designated
// constraints aren't met.
type CreateProductCategoryGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductCategoryGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductCategoryGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductCategoryGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductCategoryGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductCategoryGroupResponseValidationError) ErrorName() string {
	return "CreateProductCategoryGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductCategoryGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductCategoryGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductCategoryGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductCategoryGroupResponseValidationError{}

// Validate checks the field values on GetProductCategoryGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductCategoryGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductCategoryGroupRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetProductCategoryGroupRequestMultiError, or nil if none found.
func (m *GetProductCategoryGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductCategoryGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetProductCategoryGroupRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetProductCategoryGroupRequestMultiError(errors)
	}

	return nil
}

// GetProductCategoryGroupRequestMultiError is an error wrapping multiple
// validation errors returned by GetProductCategoryGroupRequest.ValidateAll()
// if the designated constraints aren't met.
type GetProductCategoryGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductCategoryGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductCategoryGroupRequestMultiError) AllErrors() []error { return m }

// GetProductCategoryGroupRequestValidationError is the validation error
// returned by GetProductCategoryGroupRequest.Validate if the designated
// constraints aren't met.
type GetProductCategoryGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductCategoryGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductCategoryGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductCategoryGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductCategoryGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductCategoryGroupRequestValidationError) ErrorName() string {
	return "GetProductCategoryGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductCategoryGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductCategoryGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductCategoryGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductCategoryGroupRequestValidationError{}

// Validate checks the field values on GetProductCategoryGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductCategoryGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductCategoryGroupResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetProductCategoryGroupResponseMultiError, or nil if none found.
func (m *GetProductCategoryGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductCategoryGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProductCategoryGroupResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProductCategoryGroupResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProductCategoryGroupResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProductCategoryGroupResponseMultiError(errors)
	}

	return nil
}

// GetProductCategoryGroupResponseMultiError is an error wrapping multiple
// validation errors returned by GetProductCategoryGroupResponse.ValidateAll()
// if the designated constraints aren't met.
type GetProductCategoryGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductCategoryGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductCategoryGroupResponseMultiError) AllErrors() []error { return m }

// GetProductCategoryGroupResponseValidationError is the validation error
// returned by GetProductCategoryGroupResponse.Validate if the designated
// constraints aren't met.
type GetProductCategoryGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductCategoryGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductCategoryGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductCategoryGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductCategoryGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductCategoryGroupResponseValidationError) ErrorName() string {
	return "GetProductCategoryGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductCategoryGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductCategoryGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductCategoryGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductCategoryGroupResponseValidationError{}

// Validate checks the field values on ListProductCategoryGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProductCategoryGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProductCategoryGroupRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListProductCategoryGroupRequestMultiError, or nil if none found.
func (m *ListProductCategoryGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProductCategoryGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetNext() < 0 {
		err := ListProductCategoryGroupRequestValidationError{
			field:  "Next",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLimit(); val <= 0 || val > 100 {
		err := ListProductCategoryGroupRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListProductCategoryGroupRequestMultiError(errors)
	}

	return nil
}

// ListProductCategoryGroupRequestMultiError is an error wrapping multiple
// validation errors returned by ListProductCategoryGroupRequest.ValidateAll()
// if the designated constraints aren't met.
type ListProductCategoryGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProductCategoryGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProductCategoryGroupRequestMultiError) AllErrors() []error { return m }

// ListProductCategoryGroupRequestValidationError is the validation error
// returned by ListProductCategoryGroupRequest.Validate if the designated
// constraints aren't met.
type ListProductCategoryGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductCategoryGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductCategoryGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductCategoryGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductCategoryGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductCategoryGroupRequestValidationError) ErrorName() string {
	return "ListProductCategoryGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductCategoryGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductCategoryGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductCategoryGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductCategoryGroupRequestValidationError{}

// Validate checks the field values on ListProductCategoryGroupResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListProductCategoryGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProductCategoryGroupResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListProductCategoryGroupResponseMultiError, or nil if none found.
func (m *ListProductCategoryGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProductCategoryGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Len

	// no validation rules for Next

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProductCategoryGroupResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProductCategoryGroupResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProductCategoryGroupResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProductCategoryGroupResponseMultiError(errors)
	}

	return nil
}

// ListProductCategoryGroupResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListProductCategoryGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type ListProductCategoryGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProductCategoryGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProductCategoryGroupResponseMultiError) AllErrors() []error { return m }

// ListProductCategoryGroupResponseValidationError is the validation error
// returned by ListProductCategoryGroupResponse.Validate if the designated
// constraints aren't met.
type ListProductCategoryGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductCategoryGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductCategoryGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductCategoryGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductCategoryGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductCategoryGroupResponseValidationError) ErrorName() string {
	return "ListProductCategoryGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductCategoryGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductCategoryGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductCategoryGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductCategoryGroupResponseValidationError{}

// Validate checks the field values on UpdateProductCategoryGroupRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateProductCategoryGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductCategoryGroupRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateProductCategoryGroupRequestMultiError, or nil if none found.
func (m *UpdateProductCategoryGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductCategoryGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateProductCategoryGroupRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetData() == nil {
		err := UpdateProductCategoryGroupRequestValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if a := m.GetData(); a != nil {

	}

	if len(errors) > 0 {
		return UpdateProductCategoryGroupRequestMultiError(errors)
	}

	return nil
}

// UpdateProductCategoryGroupRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateProductCategoryGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateProductCategoryGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductCategoryGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductCategoryGroupRequestMultiError) AllErrors() []error { return m }

// UpdateProductCategoryGroupRequestValidationError is the validation error
// returned by UpdateProductCategoryGroupRequest.Validate if the designated
// constraints aren't met.
type UpdateProductCategoryGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductCategoryGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductCategoryGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductCategoryGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductCategoryGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductCategoryGroupRequestValidationError) ErrorName() string {
	return "UpdateProductCategoryGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductCategoryGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductCategoryGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductCategoryGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductCategoryGroupRequestValidationError{}

// Validate checks the field values on UpdateProductCategoryGroupResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateProductCategoryGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductCategoryGroupResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateProductCategoryGroupResponseMultiError, or nil if none found.
func (m *UpdateProductCategoryGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductCategoryGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProductCategoryGroupResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProductCategoryGroupResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProductCategoryGroupResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProductCategoryGroupResponseMultiError(errors)
	}

	return nil
}

// UpdateProductCategoryGroupResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateProductCategoryGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateProductCategoryGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductCategoryGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductCategoryGroupResponseMultiError) AllErrors() []error { return m }

// UpdateProductCategoryGroupResponseValidationError is the validation error
// returned by UpdateProductCategoryGroupResponse.Validate if the designated
// constraints aren't met.
type UpdateProductCategoryGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductCategoryGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductCategoryGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductCategoryGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductCategoryGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductCategoryGroupResponseValidationError) ErrorName() string {
	return "UpdateProductCategoryGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductCategoryGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductCategoryGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductCategoryGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductCategoryGroupResponseValidationError{}

// Validate checks the field values on CreateProductCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductCategoryRequestMultiError, or nil if none found.
func (m *CreateProductCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := CreateProductCategoryRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetType()); l < 1 || l > 255 {
		err := CreateProductCategoryRequestValidationError{
			field:  "Type",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ParentId

	// no validation rules for ProductCategoryGroupId

	// no validation rules for ErpId

	if len(errors) > 0 {
		return CreateProductCategoryRequestMultiError(errors)
	}

	return nil
}

// CreateProductCategoryRequestMultiError is an error wrapping multiple
// validation errors returned by CreateProductCategoryRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateProductCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductCategoryRequestMultiError) AllErrors() []error { return m }

// CreateProductCategoryRequestValidationError is the validation error returned
// by CreateProductCategoryRequest.Validate if the designated constraints
// aren't met.
type CreateProductCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductCategoryRequestValidationError) ErrorName() string {
	return "CreateProductCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductCategoryRequestValidationError{}

// Validate checks the field values on CreateProductCategoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductCategoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductCategoryResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateProductCategoryResponseMultiError, or nil if none found.
func (m *CreateProductCategoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductCategoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProductCategoryResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProductCategoryResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProductCategoryResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProductCategoryResponseMultiError(errors)
	}

	return nil
}

// CreateProductCategoryResponseMultiError is an error wrapping multiple
// validation errors returned by CreateProductCategoryResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateProductCategoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductCategoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductCategoryResponseMultiError) AllErrors() []error { return m }

// CreateProductCategoryResponseValidationError is the validation error
// returned by CreateProductCategoryResponse.Validate if the designated
// constraints aren't met.
type CreateProductCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductCategoryResponseValidationError) ErrorName() string {
	return "CreateProductCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductCategoryResponseValidationError{}

// Validate checks the field values on GetProductCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductCategoryRequestMultiError, or nil if none found.
func (m *GetProductCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetProductCategoryRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetProductCategoryRequestMultiError(errors)
	}

	return nil
}

// GetProductCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by GetProductCategoryRequest.ValidateAll() if the
// designated constraints aren't met.
type GetProductCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductCategoryRequestMultiError) AllErrors() []error { return m }

// GetProductCategoryRequestValidationError is the validation error returned by
// GetProductCategoryRequest.Validate if the designated constraints aren't met.
type GetProductCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductCategoryRequestValidationError) ErrorName() string {
	return "GetProductCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductCategoryRequestValidationError{}

// Validate checks the field values on GetProductCategoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductCategoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductCategoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductCategoryResponseMultiError, or nil if none found.
func (m *GetProductCategoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductCategoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProductCategoryResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProductCategoryResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProductCategoryResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProductCategoryResponseMultiError(errors)
	}

	return nil
}

// GetProductCategoryResponseMultiError is an error wrapping multiple
// validation errors returned by GetProductCategoryResponse.ValidateAll() if
// the designated constraints aren't met.
type GetProductCategoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductCategoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductCategoryResponseMultiError) AllErrors() []error { return m }

// GetProductCategoryResponseValidationError is the validation error returned
// by GetProductCategoryResponse.Validate if the designated constraints aren't met.
type GetProductCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductCategoryResponseValidationError) ErrorName() string {
	return "GetProductCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductCategoryResponseValidationError{}

// Validate checks the field values on ListProductCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProductCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProductCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProductCategoryRequestMultiError, or nil if none found.
func (m *ListProductCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProductCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetNext() < 0 {
		err := ListProductCategoryRequestValidationError{
			field:  "Next",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLimit(); val <= 0 || val > 100 {
		err := ListProductCategoryRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListProductCategoryRequestMultiError(errors)
	}

	return nil
}

// ListProductCategoryRequestMultiError is an error wrapping multiple
// validation errors returned by ListProductCategoryRequest.ValidateAll() if
// the designated constraints aren't met.
type ListProductCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProductCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProductCategoryRequestMultiError) AllErrors() []error { return m }

// ListProductCategoryRequestValidationError is the validation error returned
// by ListProductCategoryRequest.Validate if the designated constraints aren't met.
type ListProductCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductCategoryRequestValidationError) ErrorName() string {
	return "ListProductCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductCategoryRequestValidationError{}

// Validate checks the field values on ListProductCategoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProductCategoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProductCategoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProductCategoryResponseMultiError, or nil if none found.
func (m *ListProductCategoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProductCategoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Len

	// no validation rules for Next

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProductCategoryResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProductCategoryResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProductCategoryResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProductCategoryResponseMultiError(errors)
	}

	return nil
}

// ListProductCategoryResponseMultiError is an error wrapping multiple
// validation errors returned by ListProductCategoryResponse.ValidateAll() if
// the designated constraints aren't met.
type ListProductCategoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProductCategoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProductCategoryResponseMultiError) AllErrors() []error { return m }

// ListProductCategoryResponseValidationError is the validation error returned
// by ListProductCategoryResponse.Validate if the designated constraints
// aren't met.
type ListProductCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductCategoryResponseValidationError) ErrorName() string {
	return "ListProductCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductCategoryResponseValidationError{}

// Validate checks the field values on UpdateProductCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProductCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProductCategoryRequestMultiError, or nil if none found.
func (m *UpdateProductCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateProductCategoryRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetData() == nil {
		err := UpdateProductCategoryRequestValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if a := m.GetData(); a != nil {

	}

	if len(errors) > 0 {
		return UpdateProductCategoryRequestMultiError(errors)
	}

	return nil
}

// UpdateProductCategoryRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateProductCategoryRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateProductCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductCategoryRequestMultiError) AllErrors() []error { return m }

// UpdateProductCategoryRequestValidationError is the validation error returned
// by UpdateProductCategoryRequest.Validate if the designated constraints
// aren't met.
type UpdateProductCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductCategoryRequestValidationError) ErrorName() string {
	return "UpdateProductCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductCategoryRequestValidationError{}

// Validate checks the field values on UpdateProductCategoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProductCategoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductCategoryResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateProductCategoryResponseMultiError, or nil if none found.
func (m *UpdateProductCategoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductCategoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProductCategoryResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProductCategoryResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProductCategoryResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProductCategoryResponseMultiError(errors)
	}

	return nil
}

// UpdateProductCategoryResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateProductCategoryResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateProductCategoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductCategoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductCategoryResponseMultiError) AllErrors() []error { return m }

// UpdateProductCategoryResponseValidationError is the validation error
// returned by UpdateProductCategoryResponse.Validate if the designated
// constraints aren't met.
type UpdateProductCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductCategoryResponseValidationError) ErrorName() string {
	return "UpdateProductCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductCategoryResponseValidationError{}

// Validate checks the field values on CreateProductBarcodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductBarcodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductBarcodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductBarcodeRequestMultiError, or nil if none found.
func (m *CreateProductBarcodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductBarcodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetCode()); l < 0 || l > 255 {
		err := CreateProductBarcodeRequestValidationError{
			field:  "Code",
			reason: "value length must be between 0 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ProductId

	// no validation rules for ErpId

	if len(errors) > 0 {
		return CreateProductBarcodeRequestMultiError(errors)
	}

	return nil
}

// CreateProductBarcodeRequestMultiError is an error wrapping multiple
// validation errors returned by CreateProductBarcodeRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateProductBarcodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductBarcodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductBarcodeRequestMultiError) AllErrors() []error { return m }

// CreateProductBarcodeRequestValidationError is the validation error returned
// by CreateProductBarcodeRequest.Validate if the designated constraints
// aren't met.
type CreateProductBarcodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductBarcodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductBarcodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductBarcodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductBarcodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductBarcodeRequestValidationError) ErrorName() string {
	return "CreateProductBarcodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductBarcodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductBarcodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductBarcodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductBarcodeRequestValidationError{}

// Validate checks the field values on CreateProductBarcodeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductBarcodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductBarcodeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductBarcodeResponseMultiError, or nil if none found.
func (m *CreateProductBarcodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductBarcodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProductBarcodeResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProductBarcodeResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProductBarcodeResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProductBarcodeResponseMultiError(errors)
	}

	return nil
}

// CreateProductBarcodeResponseMultiError is an error wrapping multiple
// validation errors returned by CreateProductBarcodeResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateProductBarcodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductBarcodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductBarcodeResponseMultiError) AllErrors() []error { return m }

// CreateProductBarcodeResponseValidationError is the validation error returned
// by CreateProductBarcodeResponse.Validate if the designated constraints
// aren't met.
type CreateProductBarcodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductBarcodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductBarcodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductBarcodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductBarcodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductBarcodeResponseValidationError) ErrorName() string {
	return "CreateProductBarcodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductBarcodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductBarcodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductBarcodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductBarcodeResponseValidationError{}

// Validate checks the field values on GetProductBarcodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductBarcodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductBarcodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductBarcodeRequestMultiError, or nil if none found.
func (m *GetProductBarcodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductBarcodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetProductBarcodeRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetProductBarcodeRequestMultiError(errors)
	}

	return nil
}

// GetProductBarcodeRequestMultiError is an error wrapping multiple validation
// errors returned by GetProductBarcodeRequest.ValidateAll() if the designated
// constraints aren't met.
type GetProductBarcodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductBarcodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductBarcodeRequestMultiError) AllErrors() []error { return m }

// GetProductBarcodeRequestValidationError is the validation error returned by
// GetProductBarcodeRequest.Validate if the designated constraints aren't met.
type GetProductBarcodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductBarcodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductBarcodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductBarcodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductBarcodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductBarcodeRequestValidationError) ErrorName() string {
	return "GetProductBarcodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductBarcodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductBarcodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductBarcodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductBarcodeRequestValidationError{}

// Validate checks the field values on GetProductBarcodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductBarcodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductBarcodeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductBarcodeResponseMultiError, or nil if none found.
func (m *GetProductBarcodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductBarcodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProductBarcodeResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProductBarcodeResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProductBarcodeResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProductBarcodeResponseMultiError(errors)
	}

	return nil
}

// GetProductBarcodeResponseMultiError is an error wrapping multiple validation
// errors returned by GetProductBarcodeResponse.ValidateAll() if the
// designated constraints aren't met.
type GetProductBarcodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductBarcodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductBarcodeResponseMultiError) AllErrors() []error { return m }

// GetProductBarcodeResponseValidationError is the validation error returned by
// GetProductBarcodeResponse.Validate if the designated constraints aren't met.
type GetProductBarcodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductBarcodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductBarcodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductBarcodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductBarcodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductBarcodeResponseValidationError) ErrorName() string {
	return "GetProductBarcodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductBarcodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductBarcodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductBarcodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductBarcodeResponseValidationError{}

// Validate checks the field values on ListProductBarcodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProductBarcodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProductBarcodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProductBarcodeRequestMultiError, or nil if none found.
func (m *ListProductBarcodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProductBarcodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetNext() < 0 {
		err := ListProductBarcodeRequestValidationError{
			field:  "Next",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLimit(); val <= 0 || val > 100 {
		err := ListProductBarcodeRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListProductBarcodeRequestMultiError(errors)
	}

	return nil
}

// ListProductBarcodeRequestMultiError is an error wrapping multiple validation
// errors returned by ListProductBarcodeRequest.ValidateAll() if the
// designated constraints aren't met.
type ListProductBarcodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProductBarcodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProductBarcodeRequestMultiError) AllErrors() []error { return m }

// ListProductBarcodeRequestValidationError is the validation error returned by
// ListProductBarcodeRequest.Validate if the designated constraints aren't met.
type ListProductBarcodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductBarcodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductBarcodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductBarcodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductBarcodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductBarcodeRequestValidationError) ErrorName() string {
	return "ListProductBarcodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductBarcodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductBarcodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductBarcodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductBarcodeRequestValidationError{}

// Validate checks the field values on ListProductBarcodeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProductBarcodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProductBarcodeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProductBarcodeResponseMultiError, or nil if none found.
func (m *ListProductBarcodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProductBarcodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Len

	// no validation rules for Next

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProductBarcodeResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProductBarcodeResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProductBarcodeResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProductBarcodeResponseMultiError(errors)
	}

	return nil
}

// ListProductBarcodeResponseMultiError is an error wrapping multiple
// validation errors returned by ListProductBarcodeResponse.ValidateAll() if
// the designated constraints aren't met.
type ListProductBarcodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProductBarcodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProductBarcodeResponseMultiError) AllErrors() []error { return m }

// ListProductBarcodeResponseValidationError is the validation error returned
// by ListProductBarcodeResponse.Validate if the designated constraints aren't met.
type ListProductBarcodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductBarcodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductBarcodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductBarcodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductBarcodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductBarcodeResponseValidationError) ErrorName() string {
	return "ListProductBarcodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductBarcodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductBarcodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductBarcodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductBarcodeResponseValidationError{}

// Validate checks the field values on UpdateProductBarcodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProductBarcodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductBarcodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProductBarcodeRequestMultiError, or nil if none found.
func (m *UpdateProductBarcodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductBarcodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateProductBarcodeRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetData() == nil {
		err := UpdateProductBarcodeRequestValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if a := m.GetData(); a != nil {

	}

	if len(errors) > 0 {
		return UpdateProductBarcodeRequestMultiError(errors)
	}

	return nil
}

// UpdateProductBarcodeRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateProductBarcodeRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateProductBarcodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductBarcodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductBarcodeRequestMultiError) AllErrors() []error { return m }

// UpdateProductBarcodeRequestValidationError is the validation error returned
// by UpdateProductBarcodeRequest.Validate if the designated constraints
// aren't met.
type UpdateProductBarcodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductBarcodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductBarcodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductBarcodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductBarcodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductBarcodeRequestValidationError) ErrorName() string {
	return "UpdateProductBarcodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductBarcodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductBarcodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductBarcodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductBarcodeRequestValidationError{}

// Validate checks the field values on UpdateProductBarcodeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProductBarcodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductBarcodeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProductBarcodeResponseMultiError, or nil if none found.
func (m *UpdateProductBarcodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductBarcodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProductBarcodeResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProductBarcodeResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProductBarcodeResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProductBarcodeResponseMultiError(errors)
	}

	return nil
}

// UpdateProductBarcodeResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateProductBarcodeResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateProductBarcodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductBarcodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductBarcodeResponseMultiError) AllErrors() []error { return m }

// UpdateProductBarcodeResponseValidationError is the validation error returned
// by UpdateProductBarcodeResponse.Validate if the designated constraints
// aren't met.
type UpdateProductBarcodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductBarcodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductBarcodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductBarcodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductBarcodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductBarcodeResponseValidationError) ErrorName() string {
	return "UpdateProductBarcodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductBarcodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductBarcodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductBarcodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductBarcodeResponseValidationError{}
