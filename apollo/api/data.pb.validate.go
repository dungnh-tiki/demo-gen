// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/data.proto

package apollov1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Warehouse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Warehouse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Warehouse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WarehouseMultiError, or nil
// if none found.
func (m *Warehouse) ValidateAll() error {
	return m.validate(true)
}

func (m *Warehouse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Code

	// no validation rules for Name

	// no validation rules for IsActive

	// no validation rules for IsBulkyAllow

	// no validation rules for IsBulkyAllowBop

	// no validation rules for ErpId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WarehouseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WarehouseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WarehouseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WarehouseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WarehouseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WarehouseValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WarehouseMultiError(errors)
	}

	return nil
}

// WarehouseMultiError is an error wrapping multiple validation errors returned
// by Warehouse.ValidateAll() if the designated constraints aren't met.
type WarehouseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WarehouseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WarehouseMultiError) AllErrors() []error { return m }

// WarehouseValidationError is the validation error returned by
// Warehouse.Validate if the designated constraints aren't met.
type WarehouseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WarehouseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WarehouseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WarehouseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WarehouseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WarehouseValidationError) ErrorName() string { return "WarehouseValidationError" }

// Error satisfies the builtin error interface
func (e WarehouseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWarehouse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WarehouseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WarehouseValidationError{}

// Validate checks the field values on Location with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Location) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Location with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LocationMultiError, or nil
// if none found.
func (m *Location) ValidateAll() error {
	return m.validate(true)
}

func (m *Location) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	// no validation rules for Name

	// no validation rules for CompleteName

	// no validation rules for Usage

	// no validation rules for IsActive

	// no validation rules for IsPreventDone

	// no validation rules for IsSyncStock

	// no validation rules for IsUpdateContactInfo

	// no validation rules for WarehouseId

	// no validation rules for ParentId

	if all {
		switch v := interface{}(m.GetContactInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LocationValidationError{
					field:  "ContactInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LocationValidationError{
					field:  "ContactInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContactInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LocationValidationError{
				field:  "ContactInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ErpId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LocationValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LocationValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LocationValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LocationValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LocationValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LocationValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LocationMultiError(errors)
	}

	return nil
}

// LocationMultiError is an error wrapping multiple validation errors returned
// by Location.ValidateAll() if the designated constraints aren't met.
type LocationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LocationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LocationMultiError) AllErrors() []error { return m }

// LocationValidationError is the validation error returned by
// Location.Validate if the designated constraints aren't met.
type LocationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocationValidationError) ErrorName() string { return "LocationValidationError" }

// Error satisfies the builtin error interface
func (e LocationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocationValidationError{}

// Validate checks the field values on Zone with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Zone) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Zone with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ZoneMultiError, or nil if none found.
func (m *Zone) ValidateAll() error {
	return m.validate(true)
}

func (m *Zone) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	// no validation rules for Name

	// no validation rules for Priority

	// no validation rules for WarehouseId

	// no validation rules for IsActive

	// no validation rules for ErpId

	if all {
		switch v := interface{}(m.GetWarehouse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ZoneValidationError{
					field:  "Warehouse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ZoneValidationError{
					field:  "Warehouse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWarehouse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ZoneValidationError{
				field:  "Warehouse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ZoneValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ZoneValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ZoneValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ZoneValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ZoneValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ZoneValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ZoneMultiError(errors)
	}

	return nil
}

// ZoneMultiError is an error wrapping multiple validation errors returned by
// Zone.ValidateAll() if the designated constraints aren't met.
type ZoneMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ZoneMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ZoneMultiError) AllErrors() []error { return m }

// ZoneValidationError is the validation error returned by Zone.Validate if the
// designated constraints aren't met.
type ZoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ZoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ZoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ZoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ZoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ZoneValidationError) ErrorName() string { return "ZoneValidationError" }

// Error satisfies the builtin error interface
func (e ZoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sZone.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ZoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ZoneValidationError{}

// Validate checks the field values on Shelf with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Shelf) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Shelf with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ShelfMultiError, or nil if none found.
func (m *Shelf) ValidateAll() error {
	return m.validate(true)
}

func (m *Shelf) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Code

	// no validation rules for IsActive

	// no validation rules for Type

	// no validation rules for SizeType

	// no validation rules for Length

	// no validation rules for Width

	// no validation rules for Height

	// no validation rules for WarehouseId

	// no validation rules for LocationId

	// no validation rules for ZoneId

	if all {
		switch v := interface{}(m.GetExtraAttrs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShelfValidationError{
					field:  "ExtraAttrs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShelfValidationError{
					field:  "ExtraAttrs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtraAttrs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShelfValidationError{
				field:  "ExtraAttrs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ErpId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShelfValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShelfValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShelfValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShelfValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShelfValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShelfValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWarehouse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShelfValidationError{
					field:  "Warehouse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShelfValidationError{
					field:  "Warehouse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWarehouse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShelfValidationError{
				field:  "Warehouse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShelfValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShelfValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShelfValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ShelfMultiError(errors)
	}

	return nil
}

// ShelfMultiError is an error wrapping multiple validation errors returned by
// Shelf.ValidateAll() if the designated constraints aren't met.
type ShelfMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShelfMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShelfMultiError) AllErrors() []error { return m }

// ShelfValidationError is the validation error returned by Shelf.Validate if
// the designated constraints aren't met.
type ShelfValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShelfValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShelfValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShelfValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShelfValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShelfValidationError) ErrorName() string { return "ShelfValidationError" }

// Error satisfies the builtin error interface
func (e ShelfValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShelf.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShelfValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShelfValidationError{}

// Validate checks the field values on Tote with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Tote) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tote with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ToteMultiError, or nil if none found.
func (m *Tote) ValidateAll() error {
	return m.validate(true)
}

func (m *Tote) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Code

	// no validation rules for IsActive

	// no validation rules for WarehouseId

	// no validation rules for LocationId

	if all {
		switch v := interface{}(m.GetExtraAttrs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ToteValidationError{
					field:  "ExtraAttrs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ToteValidationError{
					field:  "ExtraAttrs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtraAttrs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ToteValidationError{
				field:  "ExtraAttrs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ErpId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ToteValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ToteValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ToteValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ToteValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ToteValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ToteValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWarehouse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ToteValidationError{
					field:  "Warehouse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ToteValidationError{
					field:  "Warehouse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWarehouse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ToteValidationError{
				field:  "Warehouse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ToteValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ToteValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ToteValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ToteMultiError(errors)
	}

	return nil
}

// ToteMultiError is an error wrapping multiple validation errors returned by
// Tote.ValidateAll() if the designated constraints aren't met.
type ToteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ToteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ToteMultiError) AllErrors() []error { return m }

// ToteValidationError is the validation error returned by Tote.Validate if the
// designated constraints aren't met.
type ToteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ToteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ToteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ToteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ToteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ToteValidationError) ErrorName() string { return "ToteValidationError" }

// Error satisfies the builtin error interface
func (e ToteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTote.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ToteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ToteValidationError{}

// Validate checks the field values on ProductUom with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProductUom) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductUom with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProductUomMultiError, or
// nil if none found.
func (m *ProductUom) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductUom) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Unit

	// no validation rules for Code

	// no validation rules for IsActive

	// no validation rules for Rounding

	// no validation rules for Factor

	// no validation rules for ErpId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProductUomValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProductUomValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductUomValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProductUomValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProductUomValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductUomValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProductUomMultiError(errors)
	}

	return nil
}

// ProductUomMultiError is an error wrapping multiple validation errors
// returned by ProductUom.ValidateAll() if the designated constraints aren't met.
type ProductUomMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductUomMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductUomMultiError) AllErrors() []error { return m }

// ProductUomValidationError is the validation error returned by
// ProductUom.Validate if the designated constraints aren't met.
type ProductUomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductUomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductUomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductUomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductUomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductUomValidationError) ErrorName() string { return "ProductUomValidationError" }

// Error satisfies the builtin error interface
func (e ProductUomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductUom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductUomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductUomValidationError{}

// Validate checks the field values on ProductBrand with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProductBrand) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductBrand with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProductBrandMultiError, or
// nil if none found.
func (m *ProductBrand) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductBrand) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Code

	// no validation rules for Description

	// no validation rules for ErpId

	// no validation rules for IsActive

	if len(errors) > 0 {
		return ProductBrandMultiError(errors)
	}

	return nil
}

// ProductBrandMultiError is an error wrapping multiple validation errors
// returned by ProductBrand.ValidateAll() if the designated constraints aren't met.
type ProductBrandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductBrandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductBrandMultiError) AllErrors() []error { return m }

// ProductBrandValidationError is the validation error returned by
// ProductBrand.Validate if the designated constraints aren't met.
type ProductBrandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductBrandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductBrandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductBrandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductBrandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductBrandValidationError) ErrorName() string { return "ProductBrandValidationError" }

// Error satisfies the builtin error interface
func (e ProductBrandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductBrand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductBrandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductBrandValidationError{}

// Validate checks the field values on ProductCategoryGroup with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProductCategoryGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductCategoryGroup with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductCategoryGroupMultiError, or nil if none found.
func (m *ProductCategoryGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductCategoryGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Code

	// no validation rules for ErpId

	if len(errors) > 0 {
		return ProductCategoryGroupMultiError(errors)
	}

	return nil
}

// ProductCategoryGroupMultiError is an error wrapping multiple validation
// errors returned by ProductCategoryGroup.ValidateAll() if the designated
// constraints aren't met.
type ProductCategoryGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductCategoryGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductCategoryGroupMultiError) AllErrors() []error { return m }

// ProductCategoryGroupValidationError is the validation error returned by
// ProductCategoryGroup.Validate if the designated constraints aren't met.
type ProductCategoryGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductCategoryGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductCategoryGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductCategoryGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductCategoryGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductCategoryGroupValidationError) ErrorName() string {
	return "ProductCategoryGroupValidationError"
}

// Error satisfies the builtin error interface
func (e ProductCategoryGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductCategoryGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductCategoryGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductCategoryGroupValidationError{}

// Validate checks the field values on ProductCategory with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProductCategory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductCategory with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductCategoryMultiError, or nil if none found.
func (m *ProductCategory) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductCategory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for ParentId

	// no validation rules for ProductCategoryGroupId

	// no validation rules for ErpId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProductCategoryValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProductCategoryValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductCategoryValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProductCategoryValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProductCategoryValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductCategoryValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProductCategoryMultiError(errors)
	}

	return nil
}

// ProductCategoryMultiError is an error wrapping multiple validation errors
// returned by ProductCategory.ValidateAll() if the designated constraints
// aren't met.
type ProductCategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductCategoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductCategoryMultiError) AllErrors() []error { return m }

// ProductCategoryValidationError is the validation error returned by
// ProductCategory.Validate if the designated constraints aren't met.
type ProductCategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductCategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductCategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductCategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductCategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductCategoryValidationError) ErrorName() string { return "ProductCategoryValidationError" }

// Error satisfies the builtin error interface
func (e ProductCategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductCategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductCategoryValidationError{}

// Validate checks the field values on ProductBarcode with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProductBarcode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductBarcode with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProductBarcodeMultiError,
// or nil if none found.
func (m *ProductBarcode) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductBarcode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Code

	// no validation rules for ProductId

	// no validation rules for ErpId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProductBarcodeValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProductBarcodeValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductBarcodeValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProductBarcodeValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProductBarcodeValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductBarcodeValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProductBarcodeMultiError(errors)
	}

	return nil
}

// ProductBarcodeMultiError is an error wrapping multiple validation errors
// returned by ProductBarcode.ValidateAll() if the designated constraints
// aren't met.
type ProductBarcodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductBarcodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductBarcodeMultiError) AllErrors() []error { return m }

// ProductBarcodeValidationError is the validation error returned by
// ProductBarcode.Validate if the designated constraints aren't met.
type ProductBarcodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductBarcodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductBarcodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductBarcodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductBarcodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductBarcodeValidationError) ErrorName() string { return "ProductBarcodeValidationError" }

// Error satisfies the builtin error interface
func (e ProductBarcodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductBarcode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductBarcodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductBarcodeValidationError{}
