// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApolloServiceClient is the client API for ApolloService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApolloServiceClient interface {
	CreateWarehouse(ctx context.Context, in *CreateWarehouseRequest, opts ...grpc.CallOption) (*CreateWarehouseResponse, error)
	GetWarehouse(ctx context.Context, in *GetWarehouseRequest, opts ...grpc.CallOption) (*GetWarehouseResponse, error)
	ListWarehouses(ctx context.Context, in *ListWarehousesRequest, opts ...grpc.CallOption) (*ListWarehousesResponse, error)
	CreateLocation(ctx context.Context, in *CreateLocationRequest, opts ...grpc.CallOption) (*CreateLocationResponse, error)
	GetLocation(ctx context.Context, in *GetLocationRequest, opts ...grpc.CallOption) (*GetLocationResponse, error)
	CreateZone(ctx context.Context, in *CreateZoneRequest, opts ...grpc.CallOption) (*CreateZoneResponse, error)
	GetZone(ctx context.Context, in *GetZoneRequest, opts ...grpc.CallOption) (*GetZoneResponse, error)
	CreateShelf(ctx context.Context, in *CreateShelfRequest, opts ...grpc.CallOption) (*CreateShelfResponse, error)
	GetShelf(ctx context.Context, in *GetShelfRequest, opts ...grpc.CallOption) (*GetShelfResponse, error)
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error)
	GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductResponse, error)
	CreateProductBrand(ctx context.Context, in *CreateProductBrandRequest, opts ...grpc.CallOption) (*CreateProductBrandResponse, error)
	GetProductBrand(ctx context.Context, in *GetProductBrandRequest, opts ...grpc.CallOption) (*GetProductBrandResponse, error)
	CreateProductCategory(ctx context.Context, in *CreateProductCategoryRequest, opts ...grpc.CallOption) (*CreateProductCategoryResponse, error)
	GetProductCategory(ctx context.Context, in *GetProductCategoryRequest, opts ...grpc.CallOption) (*GetProductCategoryResponse, error)
}

type apolloServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApolloServiceClient(cc grpc.ClientConnInterface) ApolloServiceClient {
	return &apolloServiceClient{cc}
}

func (c *apolloServiceClient) CreateWarehouse(ctx context.Context, in *CreateWarehouseRequest, opts ...grpc.CallOption) (*CreateWarehouseResponse, error) {
	out := new(CreateWarehouseResponse)
	err := c.cc.Invoke(ctx, "/apollo.service.ApolloService/CreateWarehouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apolloServiceClient) GetWarehouse(ctx context.Context, in *GetWarehouseRequest, opts ...grpc.CallOption) (*GetWarehouseResponse, error) {
	out := new(GetWarehouseResponse)
	err := c.cc.Invoke(ctx, "/apollo.service.ApolloService/GetWarehouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apolloServiceClient) ListWarehouses(ctx context.Context, in *ListWarehousesRequest, opts ...grpc.CallOption) (*ListWarehousesResponse, error) {
	out := new(ListWarehousesResponse)
	err := c.cc.Invoke(ctx, "/apollo.service.ApolloService/ListWarehouses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apolloServiceClient) CreateLocation(ctx context.Context, in *CreateLocationRequest, opts ...grpc.CallOption) (*CreateLocationResponse, error) {
	out := new(CreateLocationResponse)
	err := c.cc.Invoke(ctx, "/apollo.service.ApolloService/CreateLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apolloServiceClient) GetLocation(ctx context.Context, in *GetLocationRequest, opts ...grpc.CallOption) (*GetLocationResponse, error) {
	out := new(GetLocationResponse)
	err := c.cc.Invoke(ctx, "/apollo.service.ApolloService/GetLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apolloServiceClient) CreateZone(ctx context.Context, in *CreateZoneRequest, opts ...grpc.CallOption) (*CreateZoneResponse, error) {
	out := new(CreateZoneResponse)
	err := c.cc.Invoke(ctx, "/apollo.service.ApolloService/CreateZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apolloServiceClient) GetZone(ctx context.Context, in *GetZoneRequest, opts ...grpc.CallOption) (*GetZoneResponse, error) {
	out := new(GetZoneResponse)
	err := c.cc.Invoke(ctx, "/apollo.service.ApolloService/GetZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apolloServiceClient) CreateShelf(ctx context.Context, in *CreateShelfRequest, opts ...grpc.CallOption) (*CreateShelfResponse, error) {
	out := new(CreateShelfResponse)
	err := c.cc.Invoke(ctx, "/apollo.service.ApolloService/CreateShelf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apolloServiceClient) GetShelf(ctx context.Context, in *GetShelfRequest, opts ...grpc.CallOption) (*GetShelfResponse, error) {
	out := new(GetShelfResponse)
	err := c.cc.Invoke(ctx, "/apollo.service.ApolloService/GetShelf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apolloServiceClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error) {
	out := new(CreateProductResponse)
	err := c.cc.Invoke(ctx, "/apollo.service.ApolloService/CreateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apolloServiceClient) GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductResponse, error) {
	out := new(GetProductResponse)
	err := c.cc.Invoke(ctx, "/apollo.service.ApolloService/GetProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apolloServiceClient) CreateProductBrand(ctx context.Context, in *CreateProductBrandRequest, opts ...grpc.CallOption) (*CreateProductBrandResponse, error) {
	out := new(CreateProductBrandResponse)
	err := c.cc.Invoke(ctx, "/apollo.service.ApolloService/CreateProductBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apolloServiceClient) GetProductBrand(ctx context.Context, in *GetProductBrandRequest, opts ...grpc.CallOption) (*GetProductBrandResponse, error) {
	out := new(GetProductBrandResponse)
	err := c.cc.Invoke(ctx, "/apollo.service.ApolloService/GetProductBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apolloServiceClient) CreateProductCategory(ctx context.Context, in *CreateProductCategoryRequest, opts ...grpc.CallOption) (*CreateProductCategoryResponse, error) {
	out := new(CreateProductCategoryResponse)
	err := c.cc.Invoke(ctx, "/apollo.service.ApolloService/CreateProductCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apolloServiceClient) GetProductCategory(ctx context.Context, in *GetProductCategoryRequest, opts ...grpc.CallOption) (*GetProductCategoryResponse, error) {
	out := new(GetProductCategoryResponse)
	err := c.cc.Invoke(ctx, "/apollo.service.ApolloService/GetProductCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApolloServiceServer is the server API for ApolloService service.
// All implementations should embed UnimplementedApolloServiceServer
// for forward compatibility
type ApolloServiceServer interface {
	CreateWarehouse(context.Context, *CreateWarehouseRequest) (*CreateWarehouseResponse, error)
	GetWarehouse(context.Context, *GetWarehouseRequest) (*GetWarehouseResponse, error)
	ListWarehouses(context.Context, *ListWarehousesRequest) (*ListWarehousesResponse, error)
	CreateLocation(context.Context, *CreateLocationRequest) (*CreateLocationResponse, error)
	GetLocation(context.Context, *GetLocationRequest) (*GetLocationResponse, error)
	CreateZone(context.Context, *CreateZoneRequest) (*CreateZoneResponse, error)
	GetZone(context.Context, *GetZoneRequest) (*GetZoneResponse, error)
	CreateShelf(context.Context, *CreateShelfRequest) (*CreateShelfResponse, error)
	GetShelf(context.Context, *GetShelfRequest) (*GetShelfResponse, error)
	CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error)
	GetProduct(context.Context, *GetProductRequest) (*GetProductResponse, error)
	CreateProductBrand(context.Context, *CreateProductBrandRequest) (*CreateProductBrandResponse, error)
	GetProductBrand(context.Context, *GetProductBrandRequest) (*GetProductBrandResponse, error)
	CreateProductCategory(context.Context, *CreateProductCategoryRequest) (*CreateProductCategoryResponse, error)
	GetProductCategory(context.Context, *GetProductCategoryRequest) (*GetProductCategoryResponse, error)
}

// UnimplementedApolloServiceServer should be embedded to have forward compatible implementations.
type UnimplementedApolloServiceServer struct {
}

func (UnimplementedApolloServiceServer) CreateWarehouse(context.Context, *CreateWarehouseRequest) (*CreateWarehouseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWarehouse not implemented")
}
func (UnimplementedApolloServiceServer) GetWarehouse(context.Context, *GetWarehouseRequest) (*GetWarehouseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWarehouse not implemented")
}
func (UnimplementedApolloServiceServer) ListWarehouses(context.Context, *ListWarehousesRequest) (*ListWarehousesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWarehouses not implemented")
}
func (UnimplementedApolloServiceServer) CreateLocation(context.Context, *CreateLocationRequest) (*CreateLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLocation not implemented")
}
func (UnimplementedApolloServiceServer) GetLocation(context.Context, *GetLocationRequest) (*GetLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocation not implemented")
}
func (UnimplementedApolloServiceServer) CreateZone(context.Context, *CreateZoneRequest) (*CreateZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateZone not implemented")
}
func (UnimplementedApolloServiceServer) GetZone(context.Context, *GetZoneRequest) (*GetZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetZone not implemented")
}
func (UnimplementedApolloServiceServer) CreateShelf(context.Context, *CreateShelfRequest) (*CreateShelfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShelf not implemented")
}
func (UnimplementedApolloServiceServer) GetShelf(context.Context, *GetShelfRequest) (*GetShelfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShelf not implemented")
}
func (UnimplementedApolloServiceServer) CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedApolloServiceServer) GetProduct(context.Context, *GetProductRequest) (*GetProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedApolloServiceServer) CreateProductBrand(context.Context, *CreateProductBrandRequest) (*CreateProductBrandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProductBrand not implemented")
}
func (UnimplementedApolloServiceServer) GetProductBrand(context.Context, *GetProductBrandRequest) (*GetProductBrandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductBrand not implemented")
}
func (UnimplementedApolloServiceServer) CreateProductCategory(context.Context, *CreateProductCategoryRequest) (*CreateProductCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProductCategory not implemented")
}
func (UnimplementedApolloServiceServer) GetProductCategory(context.Context, *GetProductCategoryRequest) (*GetProductCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductCategory not implemented")
}

// UnsafeApolloServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApolloServiceServer will
// result in compilation errors.
type UnsafeApolloServiceServer interface {
	mustEmbedUnimplementedApolloServiceServer()
}

func RegisterApolloServiceServer(s grpc.ServiceRegistrar, srv ApolloServiceServer) {
	s.RegisterService(&ApolloService_ServiceDesc, srv)
}

func _ApolloService_CreateWarehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWarehouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApolloServiceServer).CreateWarehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apollo.service.ApolloService/CreateWarehouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApolloServiceServer).CreateWarehouse(ctx, req.(*CreateWarehouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApolloService_GetWarehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWarehouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApolloServiceServer).GetWarehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apollo.service.ApolloService/GetWarehouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApolloServiceServer).GetWarehouse(ctx, req.(*GetWarehouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApolloService_ListWarehouses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWarehousesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApolloServiceServer).ListWarehouses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apollo.service.ApolloService/ListWarehouses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApolloServiceServer).ListWarehouses(ctx, req.(*ListWarehousesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApolloService_CreateLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApolloServiceServer).CreateLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apollo.service.ApolloService/CreateLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApolloServiceServer).CreateLocation(ctx, req.(*CreateLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApolloService_GetLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApolloServiceServer).GetLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apollo.service.ApolloService/GetLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApolloServiceServer).GetLocation(ctx, req.(*GetLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApolloService_CreateZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApolloServiceServer).CreateZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apollo.service.ApolloService/CreateZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApolloServiceServer).CreateZone(ctx, req.(*CreateZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApolloService_GetZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApolloServiceServer).GetZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apollo.service.ApolloService/GetZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApolloServiceServer).GetZone(ctx, req.(*GetZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApolloService_CreateShelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShelfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApolloServiceServer).CreateShelf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apollo.service.ApolloService/CreateShelf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApolloServiceServer).CreateShelf(ctx, req.(*CreateShelfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApolloService_GetShelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShelfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApolloServiceServer).GetShelf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apollo.service.ApolloService/GetShelf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApolloServiceServer).GetShelf(ctx, req.(*GetShelfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApolloService_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApolloServiceServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apollo.service.ApolloService/CreateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApolloServiceServer).CreateProduct(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApolloService_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApolloServiceServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apollo.service.ApolloService/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApolloServiceServer).GetProduct(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApolloService_CreateProductBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApolloServiceServer).CreateProductBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apollo.service.ApolloService/CreateProductBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApolloServiceServer).CreateProductBrand(ctx, req.(*CreateProductBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApolloService_GetProductBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApolloServiceServer).GetProductBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apollo.service.ApolloService/GetProductBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApolloServiceServer).GetProductBrand(ctx, req.(*GetProductBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApolloService_CreateProductCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApolloServiceServer).CreateProductCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apollo.service.ApolloService/CreateProductCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApolloServiceServer).CreateProductCategory(ctx, req.(*CreateProductCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApolloService_GetProductCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApolloServiceServer).GetProductCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apollo.service.ApolloService/GetProductCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApolloServiceServer).GetProductCategory(ctx, req.(*GetProductCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApolloService_ServiceDesc is the grpc.ServiceDesc for ApolloService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApolloService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apollo.service.ApolloService",
	HandlerType: (*ApolloServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWarehouse",
			Handler:    _ApolloService_CreateWarehouse_Handler,
		},
		{
			MethodName: "GetWarehouse",
			Handler:    _ApolloService_GetWarehouse_Handler,
		},
		{
			MethodName: "ListWarehouses",
			Handler:    _ApolloService_ListWarehouses_Handler,
		},
		{
			MethodName: "CreateLocation",
			Handler:    _ApolloService_CreateLocation_Handler,
		},
		{
			MethodName: "GetLocation",
			Handler:    _ApolloService_GetLocation_Handler,
		},
		{
			MethodName: "CreateZone",
			Handler:    _ApolloService_CreateZone_Handler,
		},
		{
			MethodName: "GetZone",
			Handler:    _ApolloService_GetZone_Handler,
		},
		{
			MethodName: "CreateShelf",
			Handler:    _ApolloService_CreateShelf_Handler,
		},
		{
			MethodName: "GetShelf",
			Handler:    _ApolloService_GetShelf_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _ApolloService_CreateProduct_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _ApolloService_GetProduct_Handler,
		},
		{
			MethodName: "CreateProductBrand",
			Handler:    _ApolloService_CreateProductBrand_Handler,
		},
		{
			MethodName: "GetProductBrand",
			Handler:    _ApolloService_GetProductBrand_Handler,
		},
		{
			MethodName: "CreateProductCategory",
			Handler:    _ApolloService_CreateProductCategory_Handler,
		},
		{
			MethodName: "GetProductCategory",
			Handler:    _ApolloService_GetProductCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
