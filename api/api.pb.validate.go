// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/api.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	code "google.golang.org/genproto/googleapis/rpc/code"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = code.google / rpc / code.proto_Code(0)
)

// Validate checks the field values on CreateWarehouseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWarehouseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWarehouseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWarehouseRequestMultiError, or nil if none found.
func (m *CreateWarehouseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWarehouseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetCode()); l < 1 || l > 255 {
		err := CreateWarehouseRequestValidationError{
			field:  "Code",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := CreateWarehouseRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetUsage()); l < 1 || l > 255 {
		err := CreateWarehouseRequestValidationError{
			field:  "Usage",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsActive

	// no validation rules for IsBulkyAllow

	// no validation rules for IsBulkyAllowBop

	// no validation rules for ErpId

	if len(errors) > 0 {
		return CreateWarehouseRequestMultiError(errors)
	}

	return nil
}

// CreateWarehouseRequestMultiError is an error wrapping multiple validation
// errors returned by CreateWarehouseRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateWarehouseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWarehouseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWarehouseRequestMultiError) AllErrors() []error { return m }

// CreateWarehouseRequestValidationError is the validation error returned by
// CreateWarehouseRequest.Validate if the designated constraints aren't met.
type CreateWarehouseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWarehouseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWarehouseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWarehouseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWarehouseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWarehouseRequestValidationError) ErrorName() string {
	return "CreateWarehouseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWarehouseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWarehouseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWarehouseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWarehouseRequestValidationError{}

// Validate checks the field values on CreateWarehouseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWarehouseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWarehouseResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWarehouseResponseMultiError, or nil if none found.
func (m *CreateWarehouseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWarehouseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateWarehouseResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateWarehouseResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateWarehouseResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateWarehouseResponseMultiError(errors)
	}

	return nil
}

// CreateWarehouseResponseMultiError is an error wrapping multiple validation
// errors returned by CreateWarehouseResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateWarehouseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWarehouseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWarehouseResponseMultiError) AllErrors() []error { return m }

// CreateWarehouseResponseValidationError is the validation error returned by
// CreateWarehouseResponse.Validate if the designated constraints aren't met.
type CreateWarehouseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWarehouseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWarehouseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWarehouseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWarehouseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWarehouseResponseValidationError) ErrorName() string {
	return "CreateWarehouseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWarehouseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWarehouseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWarehouseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWarehouseResponseValidationError{}

// Validate checks the field values on GetWarehouseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWarehouseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWarehouseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWarehouseRequestMultiError, or nil if none found.
func (m *GetWarehouseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWarehouseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if len(errors) > 0 {
		return GetWarehouseRequestMultiError(errors)
	}

	return nil
}

// GetWarehouseRequestMultiError is an error wrapping multiple validation
// errors returned by GetWarehouseRequest.ValidateAll() if the designated
// constraints aren't met.
type GetWarehouseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWarehouseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWarehouseRequestMultiError) AllErrors() []error { return m }

// GetWarehouseRequestValidationError is the validation error returned by
// GetWarehouseRequest.Validate if the designated constraints aren't met.
type GetWarehouseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWarehouseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWarehouseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWarehouseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWarehouseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWarehouseRequestValidationError) ErrorName() string {
	return "GetWarehouseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWarehouseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWarehouseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWarehouseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWarehouseRequestValidationError{}

// Validate checks the field values on GetWarehouseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWarehouseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWarehouseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWarehouseResponseMultiError, or nil if none found.
func (m *GetWarehouseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWarehouseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetWarehouseResponseMultiError(errors)
	}

	return nil
}

// GetWarehouseResponseMultiError is an error wrapping multiple validation
// errors returned by GetWarehouseResponse.ValidateAll() if the designated
// constraints aren't met.
type GetWarehouseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWarehouseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWarehouseResponseMultiError) AllErrors() []error { return m }

// GetWarehouseResponseValidationError is the validation error returned by
// GetWarehouseResponse.Validate if the designated constraints aren't met.
type GetWarehouseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWarehouseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWarehouseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWarehouseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWarehouseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWarehouseResponseValidationError) ErrorName() string {
	return "GetWarehouseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWarehouseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWarehouseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWarehouseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWarehouseResponseValidationError{}

// Validate checks the field values on ListWarehousesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWarehousesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWarehousesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWarehousesRequestMultiError, or nil if none found.
func (m *ListWarehousesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWarehousesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetLimit(); val <= 0 || val > 25 {
		err := ListWarehousesRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range (0, 25]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetNext() < 0 {
		err := ListWarehousesRequestValidationError{
			field:  "Next",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListWarehousesRequestMultiError(errors)
	}

	return nil
}

// ListWarehousesRequestMultiError is an error wrapping multiple validation
// errors returned by ListWarehousesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListWarehousesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWarehousesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWarehousesRequestMultiError) AllErrors() []error { return m }

// ListWarehousesRequestValidationError is the validation error returned by
// ListWarehousesRequest.Validate if the designated constraints aren't met.
type ListWarehousesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWarehousesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWarehousesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWarehousesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWarehousesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWarehousesRequestValidationError) ErrorName() string {
	return "ListWarehousesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWarehousesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWarehousesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWarehousesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWarehousesRequestValidationError{}

// Validate checks the field values on ListWarehousesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWarehousesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWarehousesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWarehousesResponseMultiError, or nil if none found.
func (m *ListWarehousesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWarehousesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListWarehousesResponseMultiError(errors)
	}

	return nil
}

// ListWarehousesResponseMultiError is an error wrapping multiple validation
// errors returned by ListWarehousesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListWarehousesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWarehousesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWarehousesResponseMultiError) AllErrors() []error { return m }

// ListWarehousesResponseValidationError is the validation error returned by
// ListWarehousesResponse.Validate if the designated constraints aren't met.
type ListWarehousesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWarehousesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWarehousesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWarehousesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWarehousesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWarehousesResponseValidationError) ErrorName() string {
	return "ListWarehousesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWarehousesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWarehousesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWarehousesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWarehousesResponseValidationError{}

// Validate checks the field values on CreateLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateLocationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLocationRequestMultiError, or nil if none found.
func (m *CreateLocationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLocationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateLocationRequestMultiError(errors)
	}

	return nil
}

// CreateLocationRequestMultiError is an error wrapping multiple validation
// errors returned by CreateLocationRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateLocationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLocationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLocationRequestMultiError) AllErrors() []error { return m }

// CreateLocationRequestValidationError is the validation error returned by
// CreateLocationRequest.Validate if the designated constraints aren't met.
type CreateLocationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLocationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLocationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLocationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLocationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLocationRequestValidationError) ErrorName() string {
	return "CreateLocationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLocationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLocationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLocationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLocationRequestValidationError{}

// Validate checks the field values on CreateLocationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateLocationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLocationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLocationResponseMultiError, or nil if none found.
func (m *CreateLocationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLocationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateLocationResponseMultiError(errors)
	}

	return nil
}

// CreateLocationResponseMultiError is an error wrapping multiple validation
// errors returned by CreateLocationResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateLocationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLocationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLocationResponseMultiError) AllErrors() []error { return m }

// CreateLocationResponseValidationError is the validation error returned by
// CreateLocationResponse.Validate if the designated constraints aren't met.
type CreateLocationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLocationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLocationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLocationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLocationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLocationResponseValidationError) ErrorName() string {
	return "CreateLocationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLocationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLocationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLocationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLocationResponseValidationError{}

// Validate checks the field values on GetLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLocationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLocationRequestMultiError, or nil if none found.
func (m *GetLocationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLocationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if len(errors) > 0 {
		return GetLocationRequestMultiError(errors)
	}

	return nil
}

// GetLocationRequestMultiError is an error wrapping multiple validation errors
// returned by GetLocationRequest.ValidateAll() if the designated constraints
// aren't met.
type GetLocationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLocationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLocationRequestMultiError) AllErrors() []error { return m }

// GetLocationRequestValidationError is the validation error returned by
// GetLocationRequest.Validate if the designated constraints aren't met.
type GetLocationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLocationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLocationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLocationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLocationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLocationRequestValidationError) ErrorName() string {
	return "GetLocationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLocationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLocationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLocationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLocationRequestValidationError{}

// Validate checks the field values on GetLocationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLocationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLocationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLocationResponseMultiError, or nil if none found.
func (m *GetLocationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLocationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetLocationResponseMultiError(errors)
	}

	return nil
}

// GetLocationResponseMultiError is an error wrapping multiple validation
// errors returned by GetLocationResponse.ValidateAll() if the designated
// constraints aren't met.
type GetLocationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLocationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLocationResponseMultiError) AllErrors() []error { return m }

// GetLocationResponseValidationError is the validation error returned by
// GetLocationResponse.Validate if the designated constraints aren't met.
type GetLocationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLocationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLocationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLocationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLocationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLocationResponseValidationError) ErrorName() string {
	return "GetLocationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLocationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLocationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLocationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLocationResponseValidationError{}

// Validate checks the field values on CreateZoneRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateZoneRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateZoneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateZoneRequestMultiError, or nil if none found.
func (m *CreateZoneRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateZoneRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateZoneRequestMultiError(errors)
	}

	return nil
}

// CreateZoneRequestMultiError is an error wrapping multiple validation errors
// returned by CreateZoneRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateZoneRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateZoneRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateZoneRequestMultiError) AllErrors() []error { return m }

// CreateZoneRequestValidationError is the validation error returned by
// CreateZoneRequest.Validate if the designated constraints aren't met.
type CreateZoneRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateZoneRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateZoneRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateZoneRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateZoneRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateZoneRequestValidationError) ErrorName() string {
	return "CreateZoneRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateZoneRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateZoneRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateZoneRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateZoneRequestValidationError{}

// Validate checks the field values on CreateZoneResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateZoneResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateZoneResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateZoneResponseMultiError, or nil if none found.
func (m *CreateZoneResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateZoneResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateZoneResponseMultiError(errors)
	}

	return nil
}

// CreateZoneResponseMultiError is an error wrapping multiple validation errors
// returned by CreateZoneResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateZoneResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateZoneResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateZoneResponseMultiError) AllErrors() []error { return m }

// CreateZoneResponseValidationError is the validation error returned by
// CreateZoneResponse.Validate if the designated constraints aren't met.
type CreateZoneResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateZoneResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateZoneResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateZoneResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateZoneResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateZoneResponseValidationError) ErrorName() string {
	return "CreateZoneResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateZoneResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateZoneResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateZoneResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateZoneResponseValidationError{}

// Validate checks the field values on GetZoneRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetZoneRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetZoneRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetZoneRequestMultiError,
// or nil if none found.
func (m *GetZoneRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetZoneRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if len(errors) > 0 {
		return GetZoneRequestMultiError(errors)
	}

	return nil
}

// GetZoneRequestMultiError is an error wrapping multiple validation errors
// returned by GetZoneRequest.ValidateAll() if the designated constraints
// aren't met.
type GetZoneRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetZoneRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetZoneRequestMultiError) AllErrors() []error { return m }

// GetZoneRequestValidationError is the validation error returned by
// GetZoneRequest.Validate if the designated constraints aren't met.
type GetZoneRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetZoneRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetZoneRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetZoneRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetZoneRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetZoneRequestValidationError) ErrorName() string { return "GetZoneRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetZoneRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetZoneRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetZoneRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetZoneRequestValidationError{}

// Validate checks the field values on GetZoneResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetZoneResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetZoneResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetZoneResponseMultiError, or nil if none found.
func (m *GetZoneResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetZoneResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetZoneResponseMultiError(errors)
	}

	return nil
}

// GetZoneResponseMultiError is an error wrapping multiple validation errors
// returned by GetZoneResponse.ValidateAll() if the designated constraints
// aren't met.
type GetZoneResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetZoneResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetZoneResponseMultiError) AllErrors() []error { return m }

// GetZoneResponseValidationError is the validation error returned by
// GetZoneResponse.Validate if the designated constraints aren't met.
type GetZoneResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetZoneResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetZoneResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetZoneResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetZoneResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetZoneResponseValidationError) ErrorName() string { return "GetZoneResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetZoneResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetZoneResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetZoneResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetZoneResponseValidationError{}

// Validate checks the field values on CreateShelfRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShelfRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShelfRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShelfRequestMultiError, or nil if none found.
func (m *CreateShelfRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShelfRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateShelfRequestMultiError(errors)
	}

	return nil
}

// CreateShelfRequestMultiError is an error wrapping multiple validation errors
// returned by CreateShelfRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateShelfRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShelfRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShelfRequestMultiError) AllErrors() []error { return m }

// CreateShelfRequestValidationError is the validation error returned by
// CreateShelfRequest.Validate if the designated constraints aren't met.
type CreateShelfRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShelfRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShelfRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShelfRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShelfRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShelfRequestValidationError) ErrorName() string {
	return "CreateShelfRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShelfRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShelfRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShelfRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShelfRequestValidationError{}

// Validate checks the field values on CreateShelfResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShelfResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShelfResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShelfResponseMultiError, or nil if none found.
func (m *CreateShelfResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShelfResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateShelfResponseMultiError(errors)
	}

	return nil
}

// CreateShelfResponseMultiError is an error wrapping multiple validation
// errors returned by CreateShelfResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateShelfResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShelfResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShelfResponseMultiError) AllErrors() []error { return m }

// CreateShelfResponseValidationError is the validation error returned by
// CreateShelfResponse.Validate if the designated constraints aren't met.
type CreateShelfResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShelfResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShelfResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShelfResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShelfResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShelfResponseValidationError) ErrorName() string {
	return "CreateShelfResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShelfResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShelfResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShelfResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShelfResponseValidationError{}

// Validate checks the field values on GetShelfRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetShelfRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShelfRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShelfRequestMultiError, or nil if none found.
func (m *GetShelfRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShelfRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if len(errors) > 0 {
		return GetShelfRequestMultiError(errors)
	}

	return nil
}

// GetShelfRequestMultiError is an error wrapping multiple validation errors
// returned by GetShelfRequest.ValidateAll() if the designated constraints
// aren't met.
type GetShelfRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShelfRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShelfRequestMultiError) AllErrors() []error { return m }

// GetShelfRequestValidationError is the validation error returned by
// GetShelfRequest.Validate if the designated constraints aren't met.
type GetShelfRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShelfRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShelfRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShelfRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShelfRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShelfRequestValidationError) ErrorName() string { return "GetShelfRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetShelfRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShelfRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShelfRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShelfRequestValidationError{}

// Validate checks the field values on GetShelfResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetShelfResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShelfResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShelfResponseMultiError, or nil if none found.
func (m *GetShelfResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShelfResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetShelfResponseMultiError(errors)
	}

	return nil
}

// GetShelfResponseMultiError is an error wrapping multiple validation errors
// returned by GetShelfResponse.ValidateAll() if the designated constraints
// aren't met.
type GetShelfResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShelfResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShelfResponseMultiError) AllErrors() []error { return m }

// GetShelfResponseValidationError is the validation error returned by
// GetShelfResponse.Validate if the designated constraints aren't met.
type GetShelfResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShelfResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShelfResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShelfResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShelfResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShelfResponseValidationError) ErrorName() string { return "GetShelfResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetShelfResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShelfResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShelfResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShelfResponseValidationError{}

// Validate checks the field values on CreateProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductRequestMultiError, or nil if none found.
func (m *CreateProductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateProductRequestMultiError(errors)
	}

	return nil
}

// CreateProductRequestMultiError is an error wrapping multiple validation
// errors returned by CreateProductRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductRequestMultiError) AllErrors() []error { return m }

// CreateProductRequestValidationError is the validation error returned by
// CreateProductRequest.Validate if the designated constraints aren't met.
type CreateProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductRequestValidationError) ErrorName() string {
	return "CreateProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductRequestValidationError{}

// Validate checks the field values on CreateProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductResponseMultiError, or nil if none found.
func (m *CreateProductResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateProductResponseMultiError(errors)
	}

	return nil
}

// CreateProductResponseMultiError is an error wrapping multiple validation
// errors returned by CreateProductResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateProductResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductResponseMultiError) AllErrors() []error { return m }

// CreateProductResponseValidationError is the validation error returned by
// CreateProductResponse.Validate if the designated constraints aren't met.
type CreateProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductResponseValidationError) ErrorName() string {
	return "CreateProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductResponseValidationError{}

// Validate checks the field values on GetProductRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductRequestMultiError, or nil if none found.
func (m *GetProductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetProductRequestMultiError(errors)
	}

	return nil
}

// GetProductRequestMultiError is an error wrapping multiple validation errors
// returned by GetProductRequest.ValidateAll() if the designated constraints
// aren't met.
type GetProductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductRequestMultiError) AllErrors() []error { return m }

// GetProductRequestValidationError is the validation error returned by
// GetProductRequest.Validate if the designated constraints aren't met.
type GetProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductRequestValidationError) ErrorName() string {
	return "GetProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductRequestValidationError{}

// Validate checks the field values on GetProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductResponseMultiError, or nil if none found.
func (m *GetProductResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetProductResponseMultiError(errors)
	}

	return nil
}

// GetProductResponseMultiError is an error wrapping multiple validation errors
// returned by GetProductResponse.ValidateAll() if the designated constraints
// aren't met.
type GetProductResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductResponseMultiError) AllErrors() []error { return m }

// GetProductResponseValidationError is the validation error returned by
// GetProductResponse.Validate if the designated constraints aren't met.
type GetProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductResponseValidationError) ErrorName() string {
	return "GetProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductResponseValidationError{}

// Validate checks the field values on CreateProductBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductBrandRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductBrandRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductBrandRequestMultiError, or nil if none found.
func (m *CreateProductBrandRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductBrandRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateProductBrandRequestMultiError(errors)
	}

	return nil
}

// CreateProductBrandRequestMultiError is an error wrapping multiple validation
// errors returned by CreateProductBrandRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateProductBrandRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductBrandRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductBrandRequestMultiError) AllErrors() []error { return m }

// CreateProductBrandRequestValidationError is the validation error returned by
// CreateProductBrandRequest.Validate if the designated constraints aren't met.
type CreateProductBrandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductBrandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductBrandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductBrandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductBrandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductBrandRequestValidationError) ErrorName() string {
	return "CreateProductBrandRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductBrandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductBrandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductBrandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductBrandRequestValidationError{}

// Validate checks the field values on CreateProductBrandResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductBrandResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductBrandResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductBrandResponseMultiError, or nil if none found.
func (m *CreateProductBrandResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductBrandResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateProductBrandResponseMultiError(errors)
	}

	return nil
}

// CreateProductBrandResponseMultiError is an error wrapping multiple
// validation errors returned by CreateProductBrandResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateProductBrandResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductBrandResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductBrandResponseMultiError) AllErrors() []error { return m }

// CreateProductBrandResponseValidationError is the validation error returned
// by CreateProductBrandResponse.Validate if the designated constraints aren't met.
type CreateProductBrandResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductBrandResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductBrandResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductBrandResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductBrandResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductBrandResponseValidationError) ErrorName() string {
	return "CreateProductBrandResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductBrandResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductBrandResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductBrandResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductBrandResponseValidationError{}

// Validate checks the field values on GetProductBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductBrandRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductBrandRequestMultiError, or nil if none found.
func (m *GetProductBrandRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductBrandRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetProductBrandRequestMultiError(errors)
	}

	return nil
}

// GetProductBrandRequestMultiError is an error wrapping multiple validation
// errors returned by GetProductBrandRequest.ValidateAll() if the designated
// constraints aren't met.
type GetProductBrandRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductBrandRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductBrandRequestMultiError) AllErrors() []error { return m }

// GetProductBrandRequestValidationError is the validation error returned by
// GetProductBrandRequest.Validate if the designated constraints aren't met.
type GetProductBrandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductBrandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductBrandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductBrandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductBrandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductBrandRequestValidationError) ErrorName() string {
	return "GetProductBrandRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductBrandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductBrandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductBrandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductBrandRequestValidationError{}

// Validate checks the field values on GetProductBrandResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductBrandResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductBrandResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductBrandResponseMultiError, or nil if none found.
func (m *GetProductBrandResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductBrandResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetProductBrandResponseMultiError(errors)
	}

	return nil
}

// GetProductBrandResponseMultiError is an error wrapping multiple validation
// errors returned by GetProductBrandResponse.ValidateAll() if the designated
// constraints aren't met.
type GetProductBrandResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductBrandResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductBrandResponseMultiError) AllErrors() []error { return m }

// GetProductBrandResponseValidationError is the validation error returned by
// GetProductBrandResponse.Validate if the designated constraints aren't met.
type GetProductBrandResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductBrandResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductBrandResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductBrandResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductBrandResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductBrandResponseValidationError) ErrorName() string {
	return "GetProductBrandResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductBrandResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductBrandResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductBrandResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductBrandResponseValidationError{}

// Validate checks the field values on CreateProductCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductCategoryRequestMultiError, or nil if none found.
func (m *CreateProductCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateProductCategoryRequestMultiError(errors)
	}

	return nil
}

// CreateProductCategoryRequestMultiError is an error wrapping multiple
// validation errors returned by CreateProductCategoryRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateProductCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductCategoryRequestMultiError) AllErrors() []error { return m }

// CreateProductCategoryRequestValidationError is the validation error returned
// by CreateProductCategoryRequest.Validate if the designated constraints
// aren't met.
type CreateProductCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductCategoryRequestValidationError) ErrorName() string {
	return "CreateProductCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductCategoryRequestValidationError{}

// Validate checks the field values on CreateProductCategoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductCategoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductCategoryResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateProductCategoryResponseMultiError, or nil if none found.
func (m *CreateProductCategoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductCategoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateProductCategoryResponseMultiError(errors)
	}

	return nil
}

// CreateProductCategoryResponseMultiError is an error wrapping multiple
// validation errors returned by CreateProductCategoryResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateProductCategoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductCategoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductCategoryResponseMultiError) AllErrors() []error { return m }

// CreateProductCategoryResponseValidationError is the validation error
// returned by CreateProductCategoryResponse.Validate if the designated
// constraints aren't met.
type CreateProductCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductCategoryResponseValidationError) ErrorName() string {
	return "CreateProductCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductCategoryResponseValidationError{}

// Validate checks the field values on GetProductCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductCategoryRequestMultiError, or nil if none found.
func (m *GetProductCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetProductCategoryRequestMultiError(errors)
	}

	return nil
}

// GetProductCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by GetProductCategoryRequest.ValidateAll() if the
// designated constraints aren't met.
type GetProductCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductCategoryRequestMultiError) AllErrors() []error { return m }

// GetProductCategoryRequestValidationError is the validation error returned by
// GetProductCategoryRequest.Validate if the designated constraints aren't met.
type GetProductCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductCategoryRequestValidationError) ErrorName() string {
	return "GetProductCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductCategoryRequestValidationError{}

// Validate checks the field values on GetProductCategoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductCategoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductCategoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductCategoryResponseMultiError, or nil if none found.
func (m *GetProductCategoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductCategoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetProductCategoryResponseMultiError(errors)
	}

	return nil
}

// GetProductCategoryResponseMultiError is an error wrapping multiple
// validation errors returned by GetProductCategoryResponse.ValidateAll() if
// the designated constraints aren't met.
type GetProductCategoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductCategoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductCategoryResponseMultiError) AllErrors() []error { return m }

// GetProductCategoryResponseValidationError is the validation error returned
// by GetProductCategoryResponse.Validate if the designated constraints aren't met.
type GetProductCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductCategoryResponseValidationError) ErrorName() string {
	return "GetProductCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductCategoryResponseValidationError{}

// Validate checks the field values on CreateWarehouseResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWarehouseResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWarehouseResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWarehouseResponse_DataMultiError, or nil if none found.
func (m *CreateWarehouseResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWarehouseResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWarehouse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateWarehouseResponse_DataValidationError{
					field:  "Warehouse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateWarehouseResponse_DataValidationError{
					field:  "Warehouse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWarehouse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateWarehouseResponse_DataValidationError{
				field:  "Warehouse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateWarehouseResponse_DataMultiError(errors)
	}

	return nil
}

// CreateWarehouseResponse_DataMultiError is an error wrapping multiple
// validation errors returned by CreateWarehouseResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type CreateWarehouseResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWarehouseResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWarehouseResponse_DataMultiError) AllErrors() []error { return m }

// CreateWarehouseResponse_DataValidationError is the validation error returned
// by CreateWarehouseResponse_Data.Validate if the designated constraints
// aren't met.
type CreateWarehouseResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWarehouseResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWarehouseResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWarehouseResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWarehouseResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWarehouseResponse_DataValidationError) ErrorName() string {
	return "CreateWarehouseResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWarehouseResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWarehouseResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWarehouseResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWarehouseResponse_DataValidationError{}
